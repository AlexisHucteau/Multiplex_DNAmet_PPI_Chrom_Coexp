Clinical_name_B,
Clinical_outcome_C,
Clinical_name_C){
if(typeof(Mutations_to_ignore) != "double"){
Mutations_samples <- Samplesheet[which(duplicated(str_split(Samplesheet$mutations, pattern=","), Mutations_to_ignore)),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Mutations_factor <- factor(ifelse(Samples_names %in% Mutations_samples, "Mut", "WT"))
}else{
Mutations_factor <- factor(rep("", length(Samples_names)))
}
Clinical_outcome_A <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_A),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome_B <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_B),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome_C <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_C),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome <- factor(ifelse(Samples_names %in% Clinical_outcome_A, Clinical_name_A,
ifelse(Samples_names %in% Clinical_outcome_B, Clinical_name_B,
ifelse(Samples_names %in% Clinical_outcome_C, Clinical_name_C, ""))))
Sample_timing <- factor(ifelse(Samples_names %in% Samplesheet$Baseline_RNAseq_data, "B", "REL"))
if(typeof(Mutations_to_ignore) != "double"){
Final_factor <- paste(Mutations_factor, Clinical_outcome, Sample_timing, sep = ".") %>% as.factor()
}else{
Final_factor <- paste(Clinical_outcome, Sample_timing, sep = ".") %>% as.factor()
}
return(Final_factor)
}
Factor_R_OR_NR_B <- Make_factor(Clinical_patient_data,
colnames(mIDHi_react_scores_GEM),
0,
c("CR", "CRi"),
"R",
c("MLFS", "HI", "CRp", "PR"),
"OR",
c("SD", "PD"),
"NR")
t_test_pheno_comp <- function(pheno_df, phenoA, phenoB, df){
res <- row_t_welch(df[, pheno_df == phenoA], df[, pheno_df == phenoB]) %>%
dplyr::filter(pvalue < 0.05) %>%
t()
colnames(res) <- stringr::str_remove(colnames(res), pattern = "_pos")
colnames(res) <- stringr::str_remove(colnames(res), pattern = "_neg")
res[,!duplicated(colnames(res))] %>% t()
}
NR_R_T_test <- t_test_pheno_comp(Factor_R_OR_NR_B, "NR.B", "R.B", mIDHi_react_scores_GEM)
Factor_relapse <- as.vector(Factor_R_OR_NR_B)
Factor_relapse[Factor_relapse == "OR.REL" | Factor_relapse == "R.REL"] <- "REL"
REL_R_T_test <- t_test_pheno_comp(Factor_relapse, "REL", "R.B", mIDHi_react_scores_GEM)
REL_NR_T_test <- t_test_pheno_comp(Factor_relapse, "REL", "NR.B", mIDHi_react_scores_GEM)
write.csv(NR_R_T_test, "DATA_Reactions/NR_R_T_test.csv")
write.csv(REL_R_T_test, "DATA_Reactions/REL_R_T_test.csv")
write.csv(REL_NR_T_test, "DATA_Reactions/REL_NR_T_test.csv")
library(biomaRt)
Gene_to_convert <- Human_GEM$GENE.ASSOCIATION %>% stringr::str_split(pattern = " or ") %>% unlist() %>% unique()
ensembl = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
genes_annotated <- getBM(attributes = c('hgnc_symbol', 'ensembl_gene_id'), filters = 'ensembl_gene_id', values = Gene_to_convert, mart = ensembl)
Reaction_Gene_asso <- Human_GEM[,c(1,4)]
Gene_reactions <- stringr::str_split(Reaction_Gene_asso$GENE.ASSOCIATION, pattern = " or ")
names(Gene_reactions) <- Human_GEM$ID
Gene_converter <- genes_annotated$hgnc_symbol
names(Gene_converter) <- genes_annotated$ensembl_gene_id
Gene_reactions <- lapply(Gene_reactions, function(reaction){
sapply(reaction, function(gene){
Gene_converter[gene]
}) %>% unique()
})
Gene_reactions_network <- lapply(names(Gene_reactions), function(reaction){
purrr::reduce(.f = function(a, b) rbind(a, data.frame(A = reaction, B = b)), .x = Gene_reactions[[reaction]], .init = data.frame(A  = reaction, B = Gene_reactions[[reaction]][1]))[-1,]
}) %>% purrr::reduce(.f = rbind, .x=.)
Gene_reactions_network_cleaned <- na.omit(Gene_reactions_network)
Gene_reactions_network_cleaned <- dplyr::filter(Gene_reactions_network_cleaned, B != "")
write.table(Gene_reactions_network_cleaned, "Results/Metabolic_network/Gene_reactions_network_cleaned.tsv", row.names = F, quote = F, sep = "\t")
Gene_reactions_network_cleaned_filtered <- Gene_reactions_network_cleaned[Gene_reactions_network_cleaned$A %in% rownames(NR_R_T_test),]
write.table(Gene_reactions_network_cleaned_filtered, "Results/Metabolic_network/Gene_reactions_network.tsv", sep = "\t", row.names = F, quote = F)
write.table(NR_R_T_test, "Results/Metabolic_network/Metabolic_features.tsv", sep = "\t", row.names = F, quote = F)
View(NR_R_T_test)
View(Gene_reactions_network_cleaned_filtered)
View(Gene_reactions_network_cleaned)
View(NR_R_T_test)
Metabolic_network_clean_NR_R <- dplyr::filter(Metabolic_network_clean, A %in% rownames(NR_R_T_test))
write.table(Metabolic_network_clean_NR_R, "Results/Metabolic_network/Metabolic_network_clean_NR_R.tsv", sep = "\t", row.names = F, quote = F)
rm(list = ls())
suppressPackageStartupMessages({
library(dplyr)
library(matrixTests)
})
Human_GEM <- read.csv("DATA_Reactions/Human_GEM_2.csv")
Metabo_reactions <- stringr::str_split(Human_GEM$EQUATION, pattern = "\\+ | => | <=>")
names(Metabo_reactions) <- Human_GEM$ID
Metabolic_network <- lapply(names(Metabo_reactions), function(reaction){
purrr::reduce(.f = function(a, b) rbind(a, data.frame(A = reaction, B = b)), .x = Metabo_reactions[[reaction]], .init = data.frame(A  = reaction, B = Metabo_reactions[[reaction]][1]))[-1,]
}) %>% purrr::reduce(.f = rbind, .x=.)
Metabolic_network_clean <- dplyr::filter(Metabolic_network, B != "")
Metabolic_network_clean$B <- stringr::str_trim(Metabolic_network_clean$B)
Remove_coeff <- function(metab){
if(length(metab) > 1){
ifelse(stringr::str_detect(metab[1], pattern = "[:alpha:]"), Reduce(x=metab, f = paste), Reduce(x=metab[-1], f = paste))
}else{
metab
}
}
Metabolic_network_clean$B <- sapply(Metabolic_network_clean$B, function(metabolite){
stringr::str_split(metabolite, pattern = "[:space:]") %>% .[[1]] %>% Remove_coeff()
})
Metabolic_network_clean <- unique(Metabolic_network_clean)
write.table(Metabolic_network_clean, "DATA_Reactions/Metabolic_network_clean.tsv", sep = "\t", row.names = F, quote = F)
mIDHi_react_scores_GEM <- read.csv("DATA_Reactions/mIDHi_react_scores_GEM.csv", check.names = F, row.names = 1)
colnames(mIDHi_react_scores_GEM) <- colnames(mIDHi_react_scores_GEM) %>%
stringr::str_remove("X")
Clinical_patient_data <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/Clinical_patient_data.csv") %>%
.[!duplicated(.),]
Make_factor <- function(Samplesheet = Clinical_patient_data,
Samples_names,
Mutations_to_ignore = 0,
Clinical_outcome_A,
Clinical_name_A,
Clinical_outcome_B,
Clinical_name_B,
Clinical_outcome_C,
Clinical_name_C){
if(typeof(Mutations_to_ignore) != "double"){
Mutations_samples <- Samplesheet[which(duplicated(str_split(Samplesheet$mutations, pattern=","), Mutations_to_ignore)),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Mutations_factor <- factor(ifelse(Samples_names %in% Mutations_samples, "Mut", "WT"))
}else{
Mutations_factor <- factor(rep("", length(Samples_names)))
}
Clinical_outcome_A <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_A),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome_B <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_B),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome_C <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_C),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome <- factor(ifelse(Samples_names %in% Clinical_outcome_A, Clinical_name_A,
ifelse(Samples_names %in% Clinical_outcome_B, Clinical_name_B,
ifelse(Samples_names %in% Clinical_outcome_C, Clinical_name_C, ""))))
Sample_timing <- factor(ifelse(Samples_names %in% Samplesheet$Baseline_RNAseq_data, "B", "REL"))
if(typeof(Mutations_to_ignore) != "double"){
Final_factor <- paste(Mutations_factor, Clinical_outcome, Sample_timing, sep = ".") %>% as.factor()
}else{
Final_factor <- paste(Clinical_outcome, Sample_timing, sep = ".") %>% as.factor()
}
return(Final_factor)
}
Factor_R_OR_NR_B <- Make_factor(Clinical_patient_data,
colnames(mIDHi_react_scores_GEM),
0,
c("CR", "CRi"),
"R",
c("MLFS", "HI", "CRp", "PR"),
"OR",
c("SD", "PD"),
"NR")
t_test_pheno_comp <- function(pheno_df, phenoA, phenoB, df){
res <- row_t_welch(df[, pheno_df == phenoA], df[, pheno_df == phenoB]) %>%
dplyr::filter(pvalue < 0.05) %>%
t()
colnames(res) <- stringr::str_remove(colnames(res), pattern = "_pos")
colnames(res) <- stringr::str_remove(colnames(res), pattern = "_neg")
res[,!duplicated(colnames(res))] %>% t()
}
NR_R_T_test <- t_test_pheno_comp(Factor_R_OR_NR_B, "NR.B", "R.B", mIDHi_react_scores_GEM)
Factor_relapse <- as.vector(Factor_R_OR_NR_B)
Factor_relapse[Factor_relapse == "OR.REL" | Factor_relapse == "R.REL"] <- "REL"
REL_R_T_test <- t_test_pheno_comp(Factor_relapse, "REL", "R.B", mIDHi_react_scores_GEM)
REL_NR_T_test <- t_test_pheno_comp(Factor_relapse, "REL", "NR.B", mIDHi_react_scores_GEM)
write.csv(NR_R_T_test, "DATA_Reactions/NR_R_T_test.csv")
write.csv(REL_R_T_test, "DATA_Reactions/REL_R_T_test.csv")
write.csv(REL_NR_T_test, "DATA_Reactions/REL_NR_T_test.csv")
library(biomaRt)
Gene_to_convert <- Human_GEM$GENE.ASSOCIATION %>% stringr::str_split(pattern = " or ") %>% unlist() %>% unique()
ensembl = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
genes_annotated <- getBM(attributes = c('hgnc_symbol', 'ensembl_gene_id'), filters = 'ensembl_gene_id', values = Gene_to_convert, mart = ensembl)
Reaction_Gene_asso <- Human_GEM[,c(1,4)]
Gene_reactions <- stringr::str_split(Reaction_Gene_asso$GENE.ASSOCIATION, pattern = " or ")
names(Gene_reactions) <- Human_GEM$ID
Gene_converter <- genes_annotated$hgnc_symbol
names(Gene_converter) <- genes_annotated$ensembl_gene_id
Gene_reactions <- lapply(Gene_reactions, function(reaction){
sapply(reaction, function(gene){
Gene_converter[gene]
}) %>% unique()
})
Gene_reactions_network <- lapply(names(Gene_reactions), function(reaction){
purrr::reduce(.f = function(a, b) rbind(a, data.frame(A = reaction, B = b)), .x = Gene_reactions[[reaction]], .init = data.frame(A  = reaction, B = Gene_reactions[[reaction]][1]))[-1,]
}) %>% purrr::reduce(.f = rbind, .x=.)
Gene_reactions_network_cleaned <- na.omit(Gene_reactions_network)
Gene_reactions_network_cleaned <- dplyr::filter(Gene_reactions_network_cleaned, B != "")
Gene_reactions_network_cleaned_filtered <- Gene_reactions_network_cleaned[Gene_reactions_network_cleaned$A %in% rownames(NR_R_T_test),]
write.table(Gene_reactions_network_cleaned_filtered, "Results/Metabolic_network/Gene_reactions_network.tsv", sep = "\t", row.names = F, quote = F)
write.table(NR_R_T_test, "Results/Metabolic_network/Metabolic_features.tsv", sep = "\t", quote = F)
Metabolic_network_clean_NR_R <- dplyr::filter(Metabolic_network_clean, A %in% rownames(NR_R_T_test))
write.table(Metabolic_network_clean_NR_R, "Results/Metabolic_network/Metabolic_network_clean_NR_R.tsv", sep = "\t", row.names = F, quote = F)
rm(list = ls())
suppressPackageStartupMessages({
library(dplyr)
library(FactoMineR)
library(factoextra)
library(sva)
library(xlsx)
library(clusterProfiler)
library(pheatmap)
library(rdist)
library(DEP)
library(SummarizedExperiment)
})
deal_with_NA <- function(df, column, value_to_change, final_value){
for (i in column){
print(i)
data.table::set(df,which(df[[i]] == value_to_change), i, final_value)
}
}
"%ni%" <- Negate("%in%")
fPPI <- read.table("Results/Proteo/fPPI_network.tsv", sep = "\t", header = T)
View(fPPI)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T) %>% dplyr::filter(Mutations_of_interest_vs_CD34_p.val < 0.1) %>% dplyr::select(name, , Mutations_of_interest_vs_CD34_diff, Mutations_of_interest_vs_CD34_p.val, ProteinDescriptions)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T) %>% dplyr::filter(Mutations_of_interest_vs_CD34_p.val < 0.1) %>% dplyr::select(name, Mutations_of_interest_vs_CD34_diff, Mutations_of_interest_vs_CD34_p.val, ProteinDescriptions)
View(Diff_Prot_exp)
write.table(Diff_Prot_exp, "Results/Proteo/Diff_Prot_exp_filtered.tsv", sep = "\t", quote = F, row.names = F)
View(Diff_Prot_exp)
write.table(Diff_Prot_exp, "Results/Proteo/Diff_Prot_exp_filtered.tsv", sep = "\t", quote = F, row.names = F)
View(Diff_Prot_exp)
fPPI <- read.table("Results/Proteo/fPPI_network.tsv", sep = "\t", header = T)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T) %>%
dplyr::filter(Mutations_of_interest_vs_CD34_p.val < 0.1) %>%
dplyr::select(name, Mutations_of_interest_vs_CD34_diff, Mutations_of_interest_vs_CD34_p.val, ProteinDescriptions)
write.table(Diff_Prot_exp, "Results/Proteo/Diff_Prot_exp_filtered.tsv", sep = "\t", quote = F, row.names = F)
fPPI <- dplyr::filter(fPPI, source %in% Diff_Prot_exp$name | target %in% Diff_Prot_exp$name)
write.table(fPPI, "Results/Proteo/fPPI_network_filtered.tsv", sep = "\t", quote = F, row.names = F)
write.table(Diff_Prot_exp, "Results/Proteo/Diff_Prot_exp_filtered.tsv", sep = "\t", quote = F, row.names = F)
View(Diff_Prot_exp)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T) %>%
dplyr::filter(Mutations_of_interest_vs_CD34_p.val < 0.1) %>%
dplyr::select(name, Mutations_of_interest_vs_CD34_diff, Mutations_of_interest_vs_CD34_p.val, ProteinDescriptions)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T) %>%
dplyr::filter(Mutations_of_interest_vs_CD34_p.val < 0.1)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T)
fPPI <- read.table("Results/Proteo/fPPI_network.tsv", sep = "\t", header = T)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T, quote = F)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T, quote = F)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T, quote = T)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T)
Diff_Prot_exp <- read.table("Results/Proteo/Diff_Prot_exp.tsv", sep = "\t", header = T) %>% as.data.frame()
Diff_Prot_exp <- Diff_Prot_exp %>%
dplyr::filter(Mutations_of_interest_vs_CD34_p.val < 0.1) %>%
dplyr::select(name, Mutations_of_interest_vs_CD34_diff, Mutations_of_interest_vs_CD34_p.val, ProteinDescriptions)
write.table(Diff_Prot_exp, "Results/Proteo/Diff_Prot_exp_filtered.tsv", sep = "\t", quote = F, row.names = F)
View(Diff_Prot_exp)
rm(list = ls())
suppressPackageStartupMessages({
library(dplyr)
library(FactoMineR)
library(factoextra)
library(sva)
library(xlsx)
library(clusterProfiler)
library(pheatmap)
library(rdist)
library(DEP)
library(SummarizedExperiment)
})
deal_with_NA <- function(df, column, value_to_change, final_value){
for (i in column){
print(i)
data.table::set(df,which(df[[i]] == value_to_change), i, final_value)
}
}
"%ni%" <- Negate("%in%")
data.dir <- "/media/alexis/DATA/Proteomic/"
Discovery_Cohort_Proteomic <- read.csv(paste0(data.dir,"Discovery_cohort.csv"))
Discovery_Cohort_Proteomic_unimputed <- read.csv(paste0(data.dir,"Discovery_cohort_unimputed.csv"), check.names = F)
Cell_lines_Proteomic <- read.csv(paste0(data.dir,"Cell_lines.csv"))
CD34_Proteomic <- read.csv(paste0(data.dir,"CD34.csv"), check.names = F)
Validation_cohort_Proteomic <- read.csv(paste0(data.dir,"Validation_cohort.csv"), dec = ",")
Discovery_clinicals <- readxl::read_excel("/media/alexis/DATA/Proteomic/1-s2.0-S1535610822000587-mmc7/Data_S1_Discovery_Cohort.xlsx", sheet = "Clinical Characteristics")
Discovery_Genotype <- readxl::read_excel("/media/alexis/DATA/Proteomic/1-s2.0-S1535610822000587-mmc7/Data_S1_Discovery_Cohort.xlsx", sheet = "PanelSeq I")
Discovery_Genotype_II <- readxl::read_excel("/media/alexis/DATA/Proteomic/1-s2.0-S1535610822000587-mmc7/Data_S1_Discovery_Cohort.xlsx", sheet = "PanelSeq II")
Discovery_Genotype_II <- Discovery_Genotype_II[,c(1,3,4,2)]
colnames(Discovery_Genotype_II) <- c("Pat_ID", "Type", "Frequency", "Gene")
Discovery_Genotype <- rbind(Discovery_Genotype, Discovery_Genotype_II)
rm(Discovery_Genotype_II)
Make_mutation_subgroups <- function(mutations_of_interest, mutations_to_skip, genotype = Discovery_Genotype, no_mutated_patients = c("F126", "F86", "F129", "F30")){
genotype_of_interest <- dplyr::filter(genotype, Gene %in% mutations_of_interest) %>% .$Pat_ID %>% unique()
patient_to_skip <- dplyr::filter(genotype, Gene %in% mutations_to_skip) %>% .$Pat_ID %>% unique()
genotype_control <- genotype$Pat_ID[genotype$Pat_ID %ni% patient_to_skip] %>% unique()
genotype_of_interest <- intersect(genotype_of_interest, genotype_control)
genotype_control <- c(genotype_control[genotype_control %ni% genotype_of_interest], no_mutated_patients)
pheno <- data.frame(Patient_ID = c(genotype_of_interest, patient_to_skip, genotype_control),
pheno = c(rep("Mutations_of_interest", length(genotype_of_interest)), rep("Others", length(patient_to_skip)), rep("Group_control", length(genotype_control))))
return(pheno)
}
Pheno <- Make_mutation_subgroups(c("IDH1", "IDH2"), c("DNMT3A", "TET2", "DNMT1", "NPM1"))
rownames(Pheno) <- Pheno$Patient_ID
Pheno <- Pheno[colnames(Discovery_Cohort_Proteomic)[1:177],]
data <- Discovery_Cohort_Proteomic_unimputed
data$PG.Genes %>% duplicated() %>% any()
data %>% group_by(PG.Genes) %>% summarize(frequency = n()) %>% arrange(desc(frequency)) %>% filter(frequency > 1)
data_unique <- make_unique(data, "PG.Genes", "PG.UniProtIds", delim = ";")
data_unique_log_reverted <- sapply(data_unique[,1:177], function(x){
sapply(x, function(y){
2**y
})
})
data_unique_log_reverted <- cbind(data_unique_log_reverted, data_unique[,177:183])
pheno_se <- data.frame("label" = colnames(data)[1:177], condition = Pheno$pheno, replicate = 1:177)
data_se <- make_se(data_unique_log_reverted, 1:177, pheno_se)
data_se
plot_frequency(data_se)
colnames(CD34_Proteomic)[1:13] <- stringr::str_remove(colnames(CD34_Proteomic)[1:13], pattern = "20210617_EXPL2_AsJa_SA_Revision_Healthy_DIAproteome_CD34cells_") %>% stringr::str_remove(pattern = ".raw.PG.Quantity") %>% stringr::str_split(pattern = "] ") %>% lapply(function(x) x[2]) %>% unlist()
Merged_patient_and_CD34 <- merge(Discovery_Cohort_Proteomic_unimputed, CD34_Proteomic, by.x = "PG.UniProtIds", by.y = "UniProtIds", all.x =T, all.y = T)
data_merged <- Merged_patient_and_CD34
data_merged$Genes %>% duplicated() %>% any()
data_merged %>% group_by(Genes) %>% summarize(frequency = n()) %>% arrange(desc(frequency)) %>% filter(frequency > 1)
data_merged_unique <- make_unique(data_merged, "PG.Genes", "PG.UniProtIds", delim = ";")
data_merged_unique_log_reverted <- data_merged_unique
data_merged_unique_log_reverted[,c(2:178, 182:194)] <- sapply(data_merged_unique_log_reverted[,c(2:178, 182:194)], function(x){
sapply(x, function(y){
2**y
})
})
Group_control <- Pheno[Pheno$pheno=="Group_control",]
Mutants <- Pheno[Pheno$pheno=="Mutations_of_interest",]
Others <- Pheno[Pheno$pheno=="Others",]
Group_control$replicat <- 1:nrow(Group_control)
Mutants$replicat <- 1:nrow(Mutants)
Others$replicat <- 1:nrow(Others)
CD34_pheno <- data.frame("Patient_ID" = colnames(data_merged)[182:194], "pheno" = rep("CD34", 13), "replicat" = 1:13)
pheno_merged_se <- rbind(Group_control, Mutants, Others, CD34_pheno)
rownames(pheno_merged_se) <- pheno_merged_se$Patient_ID
pheno_merged_se <- pheno_merged_se[colnames(data_merged)[c(2:178, 182:194)],]
colnames(pheno_merged_se) <- c("label", "condition", "replicate")
data_for_batch <- data_merged_unique_log_reverted
for (i in colnames(data_for_batch[,c(2:178, 182:194)])){
data_for_batch[,c(2:178, 182:194)][,i][is.nan(data_for_batch[,c(2:178, 182:194)][,i])]<-NA
}
batch <- ifelse(pheno_merged_se$condition == "CD34", "CD34", "Patients")
data_for_batch <- dplyr::filter(data_for_batch, !is.na(PG.Genes) & !is.na(Genes))
data_for_batch <- data.frame(data_for_batch[rowSums(is.na(data_for_batch[,2:178])) < 176 & rowSums(is.na(data_for_batch[,182:194])) < 12,])
Batch_removed_data <- sva::ComBat(as.matrix(data_for_batch[,c(2:178, 182:194)]), batch)
Batch_removed_data <- cbind(Batch_removed_data, data_for_batch[,c(1, 179:181, 195:200)])
# data_merged_batched_se <- make_se(Batch_removed_data, 1:190, pheno_merged_se)
data_merged_batched_se <- make_se(data_for_batch, c(2:178, 182:194), pheno_merged_se)
data_merged_batched_se
plot_frequency(data_merged_batched_se)
data_merged_batched_filt <- filter_missval(data_merged_batched_se, thr = 0)
data_merged_batched_filt2 <- filter_missval(data_merged_batched_se, thr = 1)
plot_numbers(data_merged_batched_filt)
plot_coverage(data_merged_batched_filt) + theme(legend.position = "none")
data_merged_batched_norm <- normalize_vsn(data_merged_batched_filt)
plot_detect(data_merged_batched_filt)
data_merged_batched_imp <- impute(data_merged_batched_filt, fun = "MinProb", q = 0.01)
data_merged_batched_imp_man <- impute(data_merged_batched_filt, fun = "man", shift = 1.8, scale = 0.3)
plot_imputation(data_merged_batched_filt, data_merged_batched_imp)
plot_imputation(data_merged_batched_filt, data_merged_batched_imp_man)
data_merged_batched_diff <- test_diff(data_merged_batched_imp, type = "control", control = "CD34")
dep_merged <- add_rejections(data_merged_batched_diff, alpha = 0.05, lfc = log2(1.5))
plot_pca(dep_merged, n = 500, point_size = 4, label = F, indicate = "condition")
plot_cor(dep_merged, significant = TRUE, lower = 0, upper = 1, pal = "Reds")
plot_heatmap(dep_merged, type = "centered", kmeans = TRUE,
k = 2, show_row_names = FALSE,
indicate = "condition")
plot_volcano(dep_merged, contrast = "Mutations_of_interest_vs_CD34", label_size = 2, add_names = TRUE, adjusted = F)
plot_single(dep_merged, proteins = "IDH1", type = "centered") + theme(legend.position = "none")
plot_cond(dep_merged)
Diff_Prot_exp <- dep_merged@elementMetadata@listData %>% as.data.frame()
View(Diff_Prot_exp)
write.table(Diff_Prot_exp, "Results/Proteo/Diff_Prot_exp.tsv", quote = F, row.names = F, sep = "\t")
fPPI <- read.table("Results/Proteo/fPPI_network.tsv", sep = "\t", header = T)
Diff_Prot_exp <- Diff_Prot_exp %>%
dplyr::filter(Mutations_of_interest_vs_CD34_p.val < 0.1) %>%
dplyr::select(name, Mutations_of_interest_vs_CD34_diff, Mutations_of_interest_vs_CD34_p.val, ProteinDescriptions)
View(Diff_Prot_exp)
write.table(Diff_Prot_exp, "Results/Proteo/Diff_Prot_exp_filtered.tsv", sep = "\t", quote = F, row.names = F)
fPPI <- dplyr::filter(fPPI, source %in% Diff_Prot_exp$name | target %in% Diff_Prot_exp$name)
write.table(fPPI, "Results/Proteo/fPPI_network_filtered.tsv", sep = "\t", quote = F, row.names = F)
rm(list = ls())
suppressPackageStartupMessages({
library(dplyr)
library(RCy3)
library(data.table)
library(GenomicRanges)
})
"%ni%" <- Negate("%in%")
library("GenomicRanges")
library("AnnotationHub")
library("rtracklayer")
library("Repitools")
Ahub <- AnnotationHub()
Ahub <- subset(Ahub, species == "Homo sapiens")
unique(Ahub$dataprovider)
promoter_data <- query(Ahub, c("GRanges", "UCSC", "RefSeq Genes"))
test <- promoter_data[["AH5040"]]
test3 <- annoGR2DF(test)
View(test3)
library(biomaRt)
mart<- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
refseq <- test3$name
geneSymbol <- getBM(filters="refseq_mrna", attributes=c("hgnc_symbol", "refseq_mrna"), values=refseq, mart=mart)
New_annotation <- merge(test3, geneSymbol, by.x = "name", by.y = "refseq_mrna", all.x = T, all.y = T)
New_annotation <- New_annotation[,-1]
New_annotation <- dplyr::select(New_annotation, chr:strand, hgnc_symbol) %>% unique(.)
View(New_annotation)
unique(Ahub$dataprovider)
promoter_data <- query(Ahub, c("GRanges", "UCSC"))
promoter_data
promoter_data$
test <- promoter_data[["AH5040"]]
promoter_data$title
promoter_data$title %>% .[. == "RefSeq Genes"]
promoter_data$title %>% .[stringr::str_detect(. ,"hg38"]
promoter_data$title %>% .[stringr::str_detect(. ,"hg38")]
promoter_data <- query(Ahub, c("GRanges"))
promoter_data$title %>% .[stringr::str_detect(. ,"hg38")]
promoter_data <- query(Ahub, c("GRanges", "Annotated genes for Gencode v32 on hg38 coordinates"))
promoter_data$title %>% .[stringr::str_detect(. ,"hg38")]
promoter_data$titl
promoter_data$titl
promoter_data$title
promoter_data
test <- promoter_data[["AH75192"]]
test3 <- annoGR2DF(test)
View(test3)
duplicated(test3$Gene)
duplicated(test3$Gene) %>% table()
promoter_data <- query(Ahub, c("GRanges", "hg38"))
promoter_data$title
View(test3)
test2 <- promoters(test)
test3 <- annoGR2DF(test2)
View(test3)
promoter_data$title
sum(1:151)
sum(1:15)
sum(1:150)
sum(1:157)
rm(list = ls())
suppressPackageStartupMessages({
library(dplyr)
library(RCy3)
library(igraph)
library(data.table)
library(Hmisc)
})
"%ni%" <- Negate("%in%")
source("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Make_koichi_factor.R")
RNAseq <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/RNAseq_parsed.csv", row.names = 1, header = T, check.names = F)
gene_sd <- sapply(rownames(RNAseq), function(gene){
sd(RNAseq[gene,])
})
names(gene_sd) <- rownames(RNAseq)
gene_sd <- gene_sd[order(gene_sd, decreasing = T)]
most_variable_genes <- names(gene_sd)[1:5000]
RNAseq_variable_genes <- RNAseq[most_variable_genes,]
NR_samples <- Factor_R_OR_NR_B == "NR.B"
corr_genes_NR <- rcorr(as.matrix(t(RNAseq_variable_genes[,NR_samples])), type = "pearson")
pvalue_genes_NR <- corr_genes_NR$P
corr_genes_NR <- corr_genes_NR$r
R_samples <- Factor_R_OR_NR_B == "R.B"
corr_genes_R <- rcorr(as.matrix(t(RNAseq_variable_genes[,R_samples])), type = "pearson")
test <- lapply(1:(ncol(pvalue_genes_NR)-1), function(num_col){
sapply((1+num_col):nrow(pvalue_genes_NR), function(num_row){
if(pvalue_genes_NR[num_row, num_col] < 0.05 && abs(corr_genes_NR[num_row, num_col]) > 0.75){
rownames(pvalue_genes_NR)[num_row]
}else{
""
}
}) %>% unique()
})
names(test) <- rownames(pvalue_genes_NR)[1:4999]
test <- lapply(names(test), function(gene){
l <- length(test[[gene]])
if(l==1){
data.frame("V1" = "",
"V2" = "")
}else{
data.frame("V1" = rep(gene, l-1),
"V2" = test[[gene]][2:l])
}
})
test <- purrr::reduce(test, rbind)
test <- unique(test)
tmp <- test
print(colnames(tmp))
tmp <- sapply(1:nrow(tmp), function(Row){
tmp2 <- tmp[Row,c("V1", "V2")]
tmp2 <- unlist(tmp2)
tmp2 <- sort(tmp2)
tmp2
})
tmp <- t(tmp)
test3 <- test[!duplicated(tmp),]
View(test3)
test3 %>% write.table("Results/Coexp/Coexp_genes.tsv", sep = "\t", quote = F)
test3 %>% write.table("Results/Coexp/Coexp_genes.tsv", sep = "\t", quote = F)
test3 %>% write.table("Results/Coexp/Coexp_genes.tsv", sep = "\t", quote = F, row.names = F)
test3 %>% write.table("Results/Coexp/Coexp_genes.tsv", sep = "\t", quote = F, row.names = F, col.names = F)
source("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Test_WGCNA/FemaleLiver-01-dataInput.R")
source("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Test_WGCNA/FemaleLiver-01-dataInput.R")
View(datTraits)
View(datExpr)
View(traitData)
