View(ASNS_methyl_mean)
View(ASNS_methyl_med)
ASNS_methyl_med <- colMedians(as.matrix(ASNS_methyl[,c(6:199)]))
names(ASNS_methyl_med) <- rownames(ASNS_methyl_mean)
ASNS_methyl_med <- as.data.frame(ASNS_methyl_med)
View(ASNS_methyl_med)
ASNS_methyl_med <- colMedians(as.matrix(ASNS_methyl[,c(6:199)]))
names(ASNS_methyl_med) <- rownames(ASNS_methyl_mean)
ASNS_methyl_med
ASNS_methyl_med <- colMedians(as.matrix(ASNS_methyl[,c(6:199)]))
ASNS_methyl_mean <- colMeans(ASNS_methyl[,c(6:199)])
ASNS_methyl_med <- colMedians(as.matrix(ASNS_methyl[,c(6:199)]))
ASNS_methyl_mean <- as.data.frame(ASNS_methyl_mean) %>% tibble::rownames_to_column()
names(ASNS_methyl_med) <- ASNS_methyl_mean$rowname
ASNS_methyl_med <- as.data.frame(ASNS_methyl_med)
View(ASNS_methyl_med)
ASNS_methyl_mean <- colMeans(ASNS_methyl[,c(6:199)])
ASNS_methyl_med <- colMedians(as.matrix(ASNS_methyl[,c(6:199)]))
ASNS_methyl_mean <- as.data.frame(ASNS_methyl_mean) %>% tibble::rownames_to_column()
names(ASNS_methyl_med) <- ASNS_methyl_mean$rowname
ASNS_methyl_med <- as.data.frame(ASNS_methyl_med) %>% tibble::rownames_to_column()
View(ASNS_methyl_med)
boxplot(ASNS_methyl_med$ASNS_methyl_med)
boxplot(ASNS_methyl_mean$ASNS_methyl_mean)
ASNS_methyl_mean$ASNS_methyl_mean
order(ASNS_methyl_mean$ASNS_methyl_mean)
ASNS_methyl_mean$ASNS_methyl_mean[order(ASNS_methyl_mean$ASNS_methyl_mean)]
ASNS_methyl_mean$rowname[order(ASNS_methyl_mean$ASNS_methyl_mean)]
ASNS_methyl_mean$rowname[order(ASNS_methyl_mean$ASNS_methyl_mean)][c(174:194)]
Most_methyl_Patients <- ASNS_methyl_mean$rowname[order(ASNS_methyl_mean$ASNS_methyl_mean)][c(174:194)]
ASNS_methyl_exp_mean$Highly_methylated <- ASNS_methyl_exp_mean$Row.names %in% Most_methyl_Patients
View(ASNS_methyl_exp_mean)
ggplot(ASNS_methyl_exp_mean, mapping = aes(x = Highly_methylated, y = ASNS, fill = Highly_methylated)) +
ggplot2::geom_violin() +
geom_jitter()
ggplot(ASNS_methyl_exp_mean, mapping = aes(x = Highly_methylated, y = ATF4, fill = Highly_methylated)) +
ggplot2::geom_violin() +
geom_jitter()
ggplot(ASNS_methyl_exp_mean, mapping = aes(x = Highly_methylated, y = PRMT5, fill = Highly_methylated)) +
ggplot2::geom_violin() +
geom_jitter()
hist(ASNS_methyl_mean$ASNS_methyl_mean)
ASNS_methyl_mean$ASNS_methyl_mean > 0.2 %>% table()
(ASNS_methyl_mean$ASNS_methyl_mean > 0.2) %>% table()
Most_methyl_Patients <- ASNS_methyl_mean$rowname[order(ASNS_methyl_mean$ASNS_methyl_mean)][c(158:194)]
ASNS_methyl_exp_mean$Highly_methylated <- ASNS_methyl_exp_mean$Row.names %in% Most_methyl_Patients
ggplot(ASNS_methyl_exp_mean, mapping = aes(x = Highly_methylated, y = ASNS, fill = Highly_methylated)) +
ggplot2::geom_violin() +
geom_jitter()
ggplot(ASNS_methyl_exp_mean, mapping = aes(x = Highly_methylated, y = ATF4, fill = Highly_methylated)) +
ggplot2::geom_violin() +
geom_jitter()
ggplot(ASNS_methyl_exp_mean, mapping = aes(x = Highly_methylated, y = PRMT5, fill = Highly_methylated)) +
ggplot2::geom_violin() +
geom_jitter()
ASNS_methyl_mean$ASNS_methyl_mean > 0.5 %>% table()
(ASNS_methyl_mean$ASNS_methyl_mean > 0.5) %>% table()
Most_methyl_Patients <- ASNS_methyl_mean$rowname[order(ASNS_methyl_mean$ASNS_methyl_mean)][c(182:194)]
ASNS_methyl_exp_mean$Highly_methylated <- ASNS_methyl_exp_mean$Row.names %in% Most_methyl_Patients
ggplot(ASNS_methyl_exp_mean, mapping = aes(x = Highly_methylated, y = ASNS, fill = Highly_methylated)) +
ggplot2::geom_violin() +
geom_jitter()
ggplot(ASNS_methyl_exp_mean, mapping = aes(x = Highly_methylated, y = ATF4, fill = Highly_methylated)) +
ggplot2::geom_violin() +
geom_jitter()
ggplot(ASNS_methyl_exp_mean, mapping = aes(x = Highly_methylated, y = PRMT5, fill = Highly_methylated)) +
ggplot2::geom_violin() +
geom_jitter()
ASNS_1_high <- ASNS_methyl_exp_mean$ASNS[which(ASNS_methyl_exp_mean$Highly_methylated)]
ASNS_2_high <- ASNS_methyl_exp_mean$ASNS[which(ASNS_methyl_exp_mean$Highly_methylated)]
ASNS_3_high <- ASNS_methyl_exp_mean$ASNS[which(ASNS_methyl_exp_mean$Highly_methylated3)]
t.test(ASNS_1_high, ASNS_2_high)
t.test(ASNS_1_high, ASNS_3_high)
t.test(ASNS_2_high, ASNS_3_high)
ATF4_1_high <- ASNS_methyl_exp_mean$ATF4[which(ASNS_methyl_exp_mean$Highly_methylated)]
ATF4_2_high <- ASNS_methyl_exp_mean$ATF4[which(ASNS_methyl_exp_mean$Highly_methylated)]
ATF4_3_high <- ASNS_methyl_exp_mean$ATF4[which(ASNS_methyl_exp_mean$Highly_methylated)]
t.test(ATF4_1_high, ATF4_2_high)
t.test(ATF4_1_high, ATF4_3_high)
t.test(ATF4_2_high, ATF4_3_high)
PRMT5_1_high <- ASNS_methyl_exp_mean$PRMT5[which(ASNS_methyl_exp_mean$Highly_methylated)]
PRMT5_2_high <- ASNS_methyl_exp_mean$PRMT5[which(ASNS_methyl_exp_mean$Highly_methylated)]
PRMT5_3_high <- ASNS_methyl_exp_mean$PRMT5[which(ASNS_methyl_exp_mean$Highly_methylated)]
t.test(PRMT5_1_high, PRMT5_2_high)
t.test(PRMT5_1_high, PRMT5_3_high)
t.test(PRMT5_2_high, PRMT5_3_high)
ASNS_high <- ASNS_methyl_exp_mean$ASNS[which(ASNS_methyl_exp_mean$Highly_methylated)]
ASNS_low <- ASNS_methyl_exp_mean$ASNS[!which(ASNS_methyl_exp_mean$Highly_methylated3)]
t.test(ASNS_high, ASNS_low)
ATF4_high <- ASNS_methyl_exp_mean$ATF4[which(ASNS_methyl_exp_mean$Highly_methylated)]
ATF4_low <- ASNS_methyl_exp_mean$ATF4[!which(ASNS_methyl_exp_mean$Highly_methylated)]
t.test(ATF4_high, ATF4_low)
PRMT5_high <- ASNS_methyl_exp_mean$PRMT5[which(ASNS_methyl_exp_mean$Highly_methylated)]
PRMT5_low <- ASNS_methyl_exp_mean$PRMT5[!which(ASNS_methyl_exp_mean$Highly_methylated)]
t.test(PRMT5_high, PRMT5_low)
ASNS_high <- ASNS_methyl_exp_mean$ASNS[which(ASNS_methyl_exp_mean$Highly_methylated)]
ASNS_low <- ASNS_methyl_exp_mean$ASNS[!which(!ASNS_methyl_exp_mean$Highly_methylated3)]
t.test(ASNS_high, ASNS_low)
ATF4_high <- ASNS_methyl_exp_mean$ATF4[which(ASNS_methyl_exp_mean$Highly_methylated)]
ATF4_low <- ASNS_methyl_exp_mean$ATF4[!which(!ASNS_methyl_exp_mean$Highly_methylated)]
t.test(ATF4_high, ATF4_low)
PRMT5_high <- ASNS_methyl_exp_mean$PRMT5[which(ASNS_methyl_exp_mean$Highly_methylated)]
PRMT5_low <- ASNS_methyl_exp_mean$PRMT5[which(!ASNS_methyl_exp_mean$Highly_methylated)]
t.test(PRMT5_high, PRMT5_low)
ASNS_high <- ASNS_methyl_exp_mean$ASNS[which(ASNS_methyl_exp_mean$Highly_methylated)]
ASNS_low <- ASNS_methyl_exp_mean$ASNS[which(!ASNS_methyl_exp_mean$Highly_methylated3)]
t.test(ASNS_high, ASNS_low)
ATF4_high <- ASNS_methyl_exp_mean$ATF4[which(ASNS_methyl_exp_mean$Highly_methylated)]
ATF4_low <- ASNS_methyl_exp_mean$ATF4[which(!ASNS_methyl_exp_mean$Highly_methylated)]
t.test(ATF4_high, ATF4_low)
PRMT5_high <- ASNS_methyl_exp_mean$PRMT5[which(ASNS_methyl_exp_mean$Highly_methylated)]
PRMT5_low <- ASNS_methyl_exp_mean$PRMT5[which(!ASNS_methyl_exp_mean$Highly_methylated)]
t.test(PRMT5_high, PRMT5_low)
glm(ASNS_methyl_exp_mean$ATF4 ~ ASNS_methyl_exp_mean$ASNS_methyl_mean)
ana1 <- glm(ASNS_methyl_exp_mean$ATF4 ~ ASNS_methyl_exp_mean$ASNS_methyl_mean)
summary(ana1)
ana1 <- glm(ASNS_methyl_exp_mean$ASNS ~ ASNS_methyl_exp_mean$ASNS_methyl_mean)
ana2 <- glm(ASNS_methyl_exp_mean$ATF4 ~ ASNS_methyl_exp_mean$ASNS_methyl_mean)
ana3 <- glm(ASNS_methyl_exp_mean$PRMT5 ~ ASNS_methyl_exp_mean$ASNS_methyl_mean)
summary(ana1)
summary(ana2)
summary(ana3)
ana1 <- glm(ASNS_methyl_exp_mean$ASNS ~ ASNS_methyl_exp_mean$ASNS_methyl_mean + 1)
ana2 <- glm(ASNS_methyl_exp_mean$ATF4 ~ ASNS_methyl_exp_mean$ASNS_methyl_mean + 1)
ana3 <- glm(ASNS_methyl_exp_mean$PRMT5 ~ ASNS_methyl_exp_mean$ASNS_methyl_mean + 1)
summary(ana1)
summary(ana2)
summary(ana3)
qqnorm(residuals(ana1))
plot(ASNS_methyl_exp_mean$ASNS_methyl_mean, residuals(ana1))
moy <- ana1$coefficients[1]
summary(ana1)
ana1$coefficients
moy <- ana1$coefficients[1] + ASNS_methyl_exp_mean$ASNS_methyl_mean * ana1$coefficients[2]
moy <- ana1$coefficients[1] + ASNS_methyl_exp_mean$ASNS_methyl_mean * ana1$coefficients[2]
plot(ASNS_methyl_exp_mean$ASNS_methyl_mean, ASNS_methyl_exp_mean$ASNS)
lines(ASNS_methyl_exp_mean$ASNS_methyl_mean, moy)
summary(ana1)
moy <- ana1$coefficients[1] + ASNS_methyl_exp_mean$ASNS_methyl_mean * ana1$coefficients[2]
plot(ASNS_methyl_exp_mean$ASNS_methyl_mean, ASNS_methyl_exp_mean$ASNS)
lines(ASNS_methyl_exp_mean$ASNS_methyl_mean, moy)
summary(ana2)
moy <- ana2$coefficients[1] + ASNS_methyl_exp_mean$ASNS_methyl_mean * ana2$coefficients[2]
plot(ASNS_methyl_exp_mean$ASNS_methyl_mean, ASNS_methyl_exp_mean$ATF4)
lines(ASNS_methyl_exp_mean$ASNS_methyl_mean, moy)
summary(ana3)
moy <- ana3$coefficients[1] + ASNS_methyl_exp_mean$ASNS_methyl_mean * ana3$coefficients[2]
plot(ASNS_methyl_exp_mean$ASNS_methyl_mean, ASNS_methyl_exp_mean$PRMT5)
lines(ASNS_methyl_exp_mean$ASNS_methyl_mean, moy)
ana1 <- glm(ASNS_methyl_exp_med$ASNS ~ ASNS_methyl_exp_med$ASNS_methyl_med + 1)
ana2 <- glm(ASNS_methyl_exp_med$ATF4 ~ ASNS_methyl_exp_med$ASNS_methyl_med + 1)
ana3 <- glm(ASNS_methyl_exp_med$PRMT5 ~ ASNS_methyl_exp_mean$ASNS_methyl_med + 1)
summary(ana1)
moy <- ana1$coefficients[1] + ASNS_methyl_exp_med$ASNS_methyl_med * ana1$coefficients[2]
plot(ASNS_methyl_exp_med$ASNS_methyl_med, ASNS_methyl_exp_med$ASNS)
lines(ASNS_methyl_exp_med$ASNS_methyl_med, moy)
summary(ana2)
moy <- ana2$coefficients[1] + ASNS_methyl_exp_med$ASNS_methyl_med * ana2$coefficients[2]
plot(ASNS_methyl_exp_med$ASNS_methyl_med, ASNS_methyl_exp_med$ATF4)
lines(ASNS_methyl_exp_med$ASNS_methyl_med, moy)
summary(ana3)
moy <- ana3$coefficients[1] + ASNS_methyl_exp_med$ASNS_methyl_med * ana3$coefficients[2]
plot(ASNS_methyl_exp_med$ASNS_methyl_med, ASNS_methyl_exp_med$PRMT5)
lines(ASNS_methyl_exp_med$ASNS_methyl_med, moy)
IDH1 <- c("BA2034R-PBMC", "BA2035R-PBMC", "BA2046R-BM", "BA2088R-BM", "BA2089R-PBMC", "BA2098R-BM", "BA2106R-BM", "BA2235R-BM", "BA2240R-PBMC", "BA2244R-PBMC", "BA2286R-BM", "BA2302R-PBMC", "BA2309R-BM", "BA2316R-BM", "BA2387R-BM", "BA2399R-BM", "BA2400R-BM", "BA2421R-PBMC", "BA2452R-BM", "BA2459R-BM", "BA2477R-BM", "BA2514R-BM", "BA2523R-BM", "BA2552R-PBMC", "BA2583R-BM", "BA2676R-BM", "BA2695R-PBMC", "BA2756R-BM", "BA2798R-BM", "BA2804R-BM", "BA2814R-PBMC", "BA2837R-PBMC", "BA2883R-BM", "BA2911R-PBMC", "BA2914R-BM", "BA2926R-BM", "BA2939R-PBMC", "BA2999R-BM", "BA3070R-PBMC", "BA3071R-PBMC", "BA3072R-PBMC", "BA3077R-PBMC")
IDH2 <- c("BA2020R-BM", "BA2024R-BM", "BA2050R-BM", "BA2069R-BM", "BA2123R-BM", "BA2133R-PBMC", "BA2171R-BM", "BA2195R-PBMC", "BA2198R-BM", "BA2233R-BM", "BA2236R-BM", "BA2245R-PBMC", "BA2286R-BM", "BA2309R-BM", "BA2311R-PBMC", "BA2355R-BM", "BA2357R-BM", "BA2361R-BM", "BA2369R-BM", "BA2402R-PBMC", "BA2405R-PBMC", "BA2429R-PBMC", "BA2469R-BM", "BA2473R-BM", "BA2485R-BM", "BA2489R-BM", "BA2502R-PBMC", "BA2511R-PBMC", "BA2526R-PBMC", "BA2538R-PBMC", "BA2589R-PBMC", "BA2595R-PBMC", "BA2597R-PBMC", "BA2618R-BM", "BA2619R-PBMC", "BA2659R-BM", "BA2662R-BM", "BA2676R-BM", "BA2685R-BM", "BA2688R-PBMC", "BA2694R-PBMC", "BA2697R-PBMC", "BA2704R-BM", "BA2775R-PBMC", "BA2782R-BM", "BA2789R-BM", "BA2817R-PBMC", "BA2822R-PBMC", "BA2836R-PBMC", "BA2846R-BM", "BA2858R-BM", "BA2905R-PBMC", "BA2908R-BM", "BA2962R-BM", "BA2984R-PBMC", "BA3001R-BM")
Sample_Patient_LLS_ID_beataml <- read.delim("~/Side_tasks/Sample_Patient_LLS_ID_beataml.csv")
View(Sample_Patient_LLS_ID_beataml)
stringr::str_remove(IDH1, "-PBMC")
stringr::str_remove(IDH1, "-PBMC") %>% stringr::str_remove(IDH1, "-BM")
library(dplyr)
stringr::str_remove(IDH1, "-PBMC") %>% stringr::str_remove(IDH1, "-BM")
stringr::str_remove(IDH1, "-PBMC") %>% stringr::str_remove("-BM")
stringr::str_remove(IDH1, "-PBMC") %>% stringr::str_remove("-BM") %>% table()
stringr::str_remove(IDH2, "-PBMC") %>% stringr::str_remove("-BM") %>% table()
IDH1_patients <- stringr::str_remove(IDH1, "-PBMC") %>% stringr::str_remove("-BM")
IDH2_patients <- stringr::str_remove(IDH2, "-PBMC") %>% stringr::str_remove("-BM")
IDH2_patients <- stringr::str_remove(IDH2, "-PBMC") %>% stringr::str_remove("-BM") %>% stringr::str_remove("R")
IDH1_patients <- stringr::str_remove(IDH1, "-PBMC") %>% stringr::str_remove("-BM") %>% stringr::str_remove("R")
Sample_Patient_LLS_ID_beataml$LLS_SampleID[which(Sample_Patient_LLS_ID_beataml$SampleID %in% IDH1_patients)]
ID_IDH1 <- Sample_Patient_LLS_ID_beataml$LLS_SampleID[which(Sample_Patient_LLS_ID_beataml$SampleID %in% IDH1_patients)]
ID_IDH2 <- Sample_Patient_LLS_ID_beataml$LLS_SampleID[which(Sample_Patient_LLS_ID_beataml$SampleID %in% IDH2_patients)]
ID_IDH1
ID_IDH2
BiocManager::install("arrow")
install.packages("arrow", repos = "https://packagemanager.rstudio.com/all/__linux__/focal/latest")
BiocManager::install("RcisTarget")
install.packages("RcisTarget")
BiocManager::install("RcisTarget")
BiocManager::install("RcisTarget")
install.packages("tmp/RcisTarget_1.14.0.tar.gz", repos = NULL, type = "source")
library(arrow)
remove.packages("arrow", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
install.packages("tmp/RcisTarget_1.14.0.tar.gz", repos = NULL, type = "source")
featherURL <- "https://resources.aertslab.org/cistarget/databases/homo_sapiens/hg19/refseq_r45/mc9nr/gene_based/hg19-tss-centered-10kb-7species.mc9nr.feather"
download.file(featherURL, destfile=basename(featherURL))
featherURL <- "https://resources.aertslab.org/cistarget/databases/homo_sapiens/hg19/refseq_r45/mc9nr/gene_based/hg19-tss-centered-10kb-7species.mc9nr.feather"
download.file(featherURL, destfile=basename(featherURL))
motigRankings <- RcisTarget::importRankings("hg19-tss-centered-10kb-7species.mc9nr.feather")
motigRankings <- importRankings("hg19-tss-centered-10kb-7species.mc9nr.feather")
install.packages("arrow", repos = "https://packagemanager.rstudio.com/all/__linux__/focal/latest", lib = "/home/alexis/R/x86_64-pc-linux-gnu-library/4.0")
BiocManager::install("RcisTarget")
BiocManager::version("arrow")
BiocManager::install("arrox")
BiocManager::install("arrow")
# We need to create a network file where the first TF is the regulon with every target with a true confidence score
# in our case from Dorothea it always be 1
# Finally use it in aracne2regulon function from viper package
dorothea2aracne2viper_regulons <- function(dorothea, exprs_m) {
dorothea_aggregation_tf <- dorothea %>%
dplyr::select(tf, target) %>%
group_by(tf) %>%
summarise(targets = str_c(target, collapse = ";"))
tmp_file <- tempfile()
for (i in 1:nrow(dorothea_aggregation_tf)) {
tf_targets <- str_split(dorothea_aggregation_tf$targets[i], ";")[[1]]
row <- c(dorothea_aggregation_tf$tf[i], unlist(mapply(c, tf_targets, rep(1, length(tf_targets)), SIMPLIFY = F)))
cat(str_c(row, collapse = "\t"), "\n", file = tmp_file, append = T)
}
aracne_regulons <- aracne2regulon(tmp_file, exprs_m, format = "adj", verbose = F)
file.remove(tmp_file)
return(aracne_regulons)
}
RNAseq <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/RNAseq_parsed.csv", row.names = 1, header = T, check.names = F)
data(dorothea_hs, package = "dorothea")
dorothea_aggregation_tf <- dorothea_hs %>%
dplyr::select(tf, target) %>%
group_by(tf) %>%
summarise(targets = str_c(target, collapse = ";"))
View(dorothea_hs)
library(dplyr)
dorothea_aggregation_tf <- dorothea_hs %>%
dplyr::select(tf, target) %>%
group_by(tf) %>%
summarise(targets = str_c(target, collapse = ";"))
View(dorothea_hs)
library(stringr)
dorothea_aggregation_tf <- dorothea_hs %>%
dplyr::select(tf, target) %>%
group_by(tf) %>%
summarise(targets = str_c(target, collapse = ";"))
View(dorothea_aggregation_tf)
tmp_file <- tempfile()
for (i in 1:nrow(dorothea_aggregation_tf)) {
tf_targets <- str_split(dorothea_aggregation_tf$targets[i], ";")[[1]]
row <- c(dorothea_aggregation_tf$tf[i], unlist(mapply(c, tf_targets, rep(1, length(tf_targets)), SIMPLIFY = F)))
cat(str_c(row, collapse = "\t"), "\n", file = tmp_file, append = T)
}
library(viper)
write.table(RNAseq, "GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/DATA/RNAseq4Aracn.tsv", sep = "\t")
library(FactoMineR)
library(igraph)
library(limma)
library(viper)
library(stringr)
library(data.table)
library(dplyr)
library(RCy3)
"%ni%" <- Negate("%in%")
RNAseq_diff_gene_expression_analysis <- list()
RNAseq <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/RNAseq_parsed.csv", row.names = 1, header = T, check.names = F)
Clinical_patient_data <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/Clinical_patient_data.csv") %>%
.[!duplicated(.),]
Make_factor <- function(Samplesheet = Clinical_patient_data,
Samples_names,
Mutations_to_ignore = 0,
Clinical_outcome_A,
Clinical_name_A,
Clinical_outcome_B,
Clinical_name_B,
Clinical_outcome_C,
Clinical_name_C){
# Function made for Clinical_patient_data
# Create a factor that can be used for Differential_analysis function
# Samplesheet = Clinical_patient_data
# Mutations_to_ignore: A vector of mutations that have to be taken into account (type 0 no mutations to ignore)
# Clinical_outcome_A: A vector of best response corresponding to the phenotype A
# Clinical_outcome_B: A vector of best response corresponding to the phenotype B
# Clinical_outcome_C: A vector of best response corresponding to the phenotype C
# Baseline_sample: A logical variable indicating whether Baseline samples are taken or not
# Relapse_sample: A logical variable indicating whether Relapse samples are taken or not
# Phenotype_A: The name of the first phenotype that have to be compared to
# Phenotype _B: The name of the second phenotype that have to be compared to
# Clinical_outcome_comparison: A logical variable indicating whether clinical outcome are taken into account
# Baseline:
# Relapse: A logical variable indicating whether Relapse samples are taken or not
if(typeof(Mutations_to_ignore) != "double"){
Mutations_samples <- Samplesheet[which(duplicated(str_split(Samplesheet$mutations, pattern=","), Mutations_to_ignore)),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Mutations_factor <- factor(ifelse(Samples_names %in% Mutations_samples, "Mut", "WT"))
}else{
Mutations_factor <- factor(rep("", length(Samples_names)))
}
Clinical_outcome_A <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_A),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome_B <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_B),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome_C <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_C),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome <- factor(ifelse(Samples_names %in% Clinical_outcome_A, Clinical_name_A,
ifelse(Samples_names %in% Clinical_outcome_B, Clinical_name_B,
ifelse(Samples_names %in% Clinical_outcome_C, Clinical_name_C, ""))))
Sample_timing <- factor(ifelse(Samples_names %in% Samplesheet$Baseline_RNAseq_data, "B", "REL"))
if(typeof(Mutations_to_ignore) != "double"){
Final_factor <- paste(Mutations_factor, Clinical_outcome, Sample_timing, sep = ".") %>% as.factor()
}else{
Final_factor <- paste(Clinical_outcome, Sample_timing, sep = ".") %>% as.factor()
}
return(Final_factor)
}
Factor_R_OR_NR_B <- Make_factor(Clinical_patient_data,
colnames(RNAseq),
0,
c("CR", "CRi"),
"R",
c("MLFS", "HI", "CRp", "PR"),
"OR",
c("SD", "PD"),
"NR")
View(Clinical_patient_data)
RNAseq4Aracn_Baseline_only <- read.delim("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/DATA/RNAseq4Aracn_Baseline_only.csv")
View(RNAseq4Aracn_Baseline_only)
RNAseq4Aracn_Baseline_only <- read.delim("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/DATA/RNAseq4Aracn_Baseline_only.csv", check.names = F)
tibble::column_to_rownames(RNAseq4Aracn_Baseline_only, "gene")
View(RNAseq4Aracn_Baseline_only)
RNAseq4Aracn_Baseline_only <- tibble::column_to_rownames(RNAseq4Aracn_Baseline_only, "gene")
View(RNAseq4Aracn_Baseline_only)
Factor
Factor_R_OR_NR_B
Factor_R_OR_NR_B <- Make_factor(Clinical_patient_data,
colnames(RNAseq4Aracn_Baseline_only),
0,
c("CR", "CRi"),
"R",
c("MLFS", "HI", "CRp", "PR"),
"OR",
c("SD", "PD"),
"NR")
RNAseq4Aracn_Baseline_only[,Factor_R_OR_NR_B == "NR.B"]
RNAseq4Aracn_Bad_responder <- RNAseq4Aracn_Baseline_only[,Factor_R_OR_NR_B == "NR.B"]
RNAseq4Aracn_Good_responder <- RNAseq4Aracn_Baseline_only[,Factor_R_OR_NR_B == "R.B"]
write.table(RNAseq4Aracn_Bad_responder, "~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/DATA/RNAseq4Aracn_Bad_responder.tsv", sep = "\t")
write.table(RNAseq4Aracn_Good_responder, "~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/DATA/RNAseq4Aracn_Good_responder.tsv", sep = "\t")
Clinical_patient_data <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/Clinical_patient_data.csv") %>%
.[!duplicated(.),]
library(dplyr)
Clinical_patient_data <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/Clinical_patient_data.csv") %>%
.[!duplicated(.),]
View(Clinical_patient_data)
setwd("GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/")
Bad_responder_aracne_network <- read.csv("output_Bad_responder/network.txt")
Bad_responder_aracne_network <- read.csv("output_Bad_responder/network.txt", sep = "\t")
View(Bad_responder_aracne_network)
colnames(Bad_responder_aracne_network)[c(1,2)] <- c("source", "target")
Baseline_aracne_network <- read.csv("output_Baseline/network.txt", sep = "\t")
Good_responder_aracne_network <- read.csv("output_Good_responder/network.txt", sep = "\t")
Good_responder_aracne_network <- read.csv("output_Good_responder/network.txt", sep = "\t")
NR_R_msviper <- readRDS("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/Results/Tables/NR_R_msviper.rds")
library(viper)
library(aracne.networks)
library(GeneAnswers)
library(org.Hs.eg.db)
data(regulonlaml)
viper_regulons2dorothea <- function(r) {
res <- r %>%
purrr::map_df(
.f = function(i) {
tf_target <- i$tfmode %>%
tibble::enframe(name = "target", value = "mor") %>%
mutate(likelihood = i$likelihood)
},
.id = "tf"
)
return(res)
}
regulonaml <- viper_regulons2dorothea(regulonlaml)
regulonaml_SYMBOL <- data.frame("source" = GeneAnswers::getSymbols(regulonaml$tf, data = "org.Hs.eg"),
"target" = GeneAnswers::getSymbols(regulonaml$target, data = "org.Hs.eg"),
"mor" = regulonaml$mor,
"likelihood" = regulonaml$likelihood)
regulonaml_SYMBOL <- data.frame("source" = GeneAnswers::getSymbols(regulonaml$tf, data = "org.Hs.eg"),
"target" = GeneAnswers::getSymbols(regulonaml$target, data = "org.Hs.eg"),
"mor" = regulonaml$mor,
"likelihood" = regulonaml$likelihood)
regulonaml <- viper_regulons2dorothea(regulonlaml)
library(viper)
library(aracne.networks)
library(GeneAnswers)
library(org.Hs.eg.db)
library(dplyr)
regulonaml_SYMBOL <- data.frame("source" = GeneAnswers::getSymbols(regulonaml$tf, data = "org.Hs.eg"),
"target" = GeneAnswers::getSymbols(regulonaml$target, data = "org.Hs.eg"),
"mor" = regulonaml$mor,
"likelihood" = regulonaml$likelihood)
regulonaml <- viper_regulons2dorothea(regulonlaml)
Good_responder_aracne_network <- read.csv("output_Good_responder/network.txt", sep = "\t")
View(regulonaml)
regulonaml_SYMBOL <- data.frame("source" = GeneAnswers::getSymbols(regulonaml$tf, data = "org.Hs.eg"),
"target" = GeneAnswers::getSymbols(regulonaml$target, data = "org.Hs.eg"),
"mor" = regulonaml$mor,
"likelihood" = regulonaml$likelihood)
PCA_rnaseq <- PCA(t(RNAseq))
library(FactoMineR)
PCA_rnaseq <- PCA(t(RNAseq))
RNAseq <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/RNAseq_parsed.csv", row.names = 1, header = T, check.names = F)
PCA_rnaseq <- PCA(t(RNAseq))
View(regulonaml_SYMBOL)
View(regulonaml_SYMBOL)
View(regulonaml_SYMBOL)
View(Bad_responder_aracne_network)
View(Baseline_aracne_network)
View(regulonaml_SYMBOL)
RNAseq <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/RNAseq_parsed.csv", row.names = 1, header = T, check.names = F)
Make_factor <- function(Samplesheet = Clinical_patient_data,
Samples_names,
Mutations_to_ignore = 0,
Clinical_outcome_A,
Clinical_name_A,
Clinical_outcome_B,
Clinical_name_B,
Clinical_outcome_C,
Clinical_name_C){
# Function made for Clinical_patient_data
# Create a factor that can be used for Differential_analysis function
# Samplesheet = Clinical_patient_data
# Mutations_to_ignore: A vector of mutations that have to be taken into account (type 0 no mutations to ignore)
# Clinical_outcome_A: A vector of best response corresponding to the phenotype A
# Clinical_outcome_B: A vector of best response corresponding to the phenotype B
# Clinical_outcome_C: A vector of best response corresponding to the phenotype C
# Baseline_sample: A logical variable indicating whether Baseline samples are taken or not
# Relapse_sample: A logical variable indicating whether Relapse samples are taken or not
# Phenotype_A: The name of the first phenotype that have to be compared to
# Phenotype _B: The name of the second phenotype that have to be compared to
# Clinical_outcome_comparison: A logical variable indicating whether clinical outcome are taken into account
# Baseline:
# Relapse: A logical variable indicating whether Relapse samples are taken or not
if(typeof(Mutations_to_ignore) != "double"){
Mutations_samples <- Samplesheet[which(duplicated(str_split(Samplesheet$mutations, pattern=","), Mutations_to_ignore)),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Mutations_factor <- factor(ifelse(Samples_names %in% Mutations_samples, "Mut", "WT"))
}else{
Mutations_factor <- factor(rep("", length(Samples_names)))
}
Clinical_outcome_A <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_A),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome_B <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_B),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome_C <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_C),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome <- factor(ifelse(Samples_names %in% Clinical_outcome_A, Clinical_name_A,
ifelse(Samples_names %in% Clinical_outcome_B, Clinical_name_B,
ifelse(Samples_names %in% Clinical_outcome_C, Clinical_name_C, ""))))
Sample_timing <- factor(ifelse(Samples_names %in% Samplesheet$Baseline_RNAseq_data, "B", "REL"))
if(typeof(Mutations_to_ignore) != "double"){
Final_factor <- paste(Mutations_factor, Clinical_outcome, Sample_timing, sep = ".") %>% as.factor()
}else{
Final_factor <- paste(Clinical_outcome, Sample_timing, sep = ".") %>% as.factor()
}
return(Final_factor)
}
Factor_R_OR_NR_B <- Make_factor(Clinical_patient_data,
colnames(RNAseq),
0,
c("CR", "CRi"),
"R",
c("MLFS", "HI", "CRp", "PR"),
"OR",
c("SD", "PD"),
"NR")
library(FactoMineR)
library(igraph)
library(limma)
library(viper)
library(stringr)
library(data.table)
library(dplyr)
library(RCy3)
Factor_R_OR_NR_B <- Make_factor(Clinical_patient_data,
colnames(RNAseq),
0,
c("CR", "CRi"),
"R",
c("MLFS", "HI", "CRp", "PR"),
"OR",
c("SD", "PD"),
"NR")
Clinical_patient_data <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/Clinical_patient_data.csv") %>%
.[!duplicated(.),]
Factor_R_OR_NR_B <- Make_factor(Clinical_patient_data,
colnames(RNAseq),
0,
c("CR", "CRi"),
"R",
c("MLFS", "HI", "CRp", "PR"),
"OR",
c("SD", "PD"),
"NR")
Factor_R_OR_NR_B
write.table(RNAseq[,Factor_R_OR_NR_B %in% c("OR.REL", "R.REL")], "DATA/RNAseq4Aracn_Relapse_only.csv")
RNAseq_diff_exp <- readRDS("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/Results/Tables/RNAseq_diff_gene_expression_analysis.rds")
View(RNAseq_diff_exp)
View(RNAseq_diff_exp[["R_OR_NR_B"]][["NR.B-R.B"]])
rownames(RNAseq_diff_exp[["R_OR_NR_B"]][["NR.B-R.B"]])[which(abs(RNAseq_diff_exp[["R_OR_NR_B"]][["NR.B-R.B"]]$logFC) > 1.5 & RNAseq_diff_exp[["R_OR_NR_B"]][["NR.B-R.B"]]$P.Value < 0.1)]
rownames(RNAseq_diff_exp[["R_OR_NR_B"]][["NR.B-R.B"]])[which(abs(RNAseq_diff_exp[["R_OR_NR_B"]][["NR.B-R.B"]]$logFC) > 1.5 & RNAseq_diff_exp[["R_OR_NR_B"]][["NR.B-R.B"]]$P.Value < 0.1)] %>% write.csv("degs.csv")
