table.column.values = c("TF", "Gene", "DMR", "cpg"),
shapes = c('ELLIPSE', "RECTANGLE", "TRIANGLE", "VEE"),
style.name = title)
setNodeColorMapping(table.column = 'logFC',
table.column.values = c(min(network_features$logFC), 0.0, max(network_features$logFC)),
colors = c ('#0000FF', '#FFFFFF', '#FF0000'),
style.name = title)
setNodeFillOpacityMapping(table.column = 'P.Value',
table.column.values = c(0, 0.1, 1),
opacities = c(255, 200, 100),
style.name = title)
setNodeSizeMapping (table.column = 'Eigen_centrality',
table.column.values = c(0, 1),
sizes = c(30, 200),
style.name = title)
setNodeFontSizeMapping(table.column = 'Eigen_centrality',
table.column.values = c(0, 1),
sizes = c(15, 75),
style.name = title)
if (TF){
setEdgeLineWidthMapping(table.column = 'mor',
table.column.values = c(min(network_edges_features$mor), 0.0, max(network_edges_features$mor)),
widths = c(10, 2, 10),
style.name = title)
setEdgeColorMapping(table.column = 'mor',
table.column.values = c(min(network_edges_features$mor), 0.0, max(network_edges_features$mor)),
colors = c('#0000FF', "#555555", '#FF0000'),
style.name = title)
setEdgeOpacityMapping(table.column = 'mor',
table.column.values = c(min(network_edges_features$mor), 0.0, max(network_edges_features$mor)),
opacities = c(255, 100, 255),
style.name = title)
}
if(PPI){
setEdgeTargetArrowShapeMapping(table.column = 'Direction',
table.column.values = names(table(network_edges_features$Direction)),
shapes = c('NONE', 'ARROW', 'T', 'NONE', 'ARROW', 'T', 'NONE', 'ARROW'),
style.name = title)
}else{
createColumnFilter(filter.name = "Activation", column = "mor", criterion = 0, type = "edges", predicate = "GREATER_THAN")
setEdgeTargetArrowShapeBypass(getSelectedEdges(), "ARROW")
createColumnFilter(filter.name = "Inhibition", column = "mor", criterion = 0, type = "edges", predicate = "LESS_THAN")
setEdgeTargetArrowShapeBypass(getSelectedEdges(), "T")
}
if(Methyl){
createColumnFilter(filter.name = "DMR_UP", column = "logFC_Methylation", criterion = 0, type = "nodes", predicate = "GREATER_THAN")
setNodeSizeBypass(getSelectedNodes(), new.sizes = 100)
setNodeColorBypass(getSelectedNodes(), new.colors = "#FF0000")
setNodeOpacityBypass(getSelectedNodes(), new.values = 255)
setNodeFontSizeBypass(getSelectedNodes(), new.sizes = 1)
createColumnFilter(filter.name = "DMR_DOWN", column = "logFC_Methylation", criterion = 0, type = "nodes", predicate = "LESS_THAN")
setNodeSizeBypass(getSelectedNodes(), new.sizes = 100)
setNodeColorBypass(getSelectedNodes(), new.colors = "#0000FF")
setNodeOpacityBypass(getSelectedNodes(), new.values = 255)
setNodeFontSizeBypass(getSelectedNodes(), new.sizes = 1)
createColumnFilter(filter.name = "cpg", column = "Type", criterion = "cpg", type = "nodes", predicate = "IS")
setNodeSizeBypass(getSelectedNodes(), new.sizes = 1)
setNodeOpacityBypass(getSelectedNodes(), new.values = 255)
createColumnFilter(filter.name = "Promoter_cpg", column = "type", type = "edges", criterion = "Promoter_cpg", predicate = "IS")
setEdgeLineWidthBypass(getSelectedEdges(), new.widths = 10)
setEdgeLineStyleBypass(getSelectedEdges(), new.styles = "DOT")
setEdgeOpacityBypass(getSelectedEdges(), new.values = 120)
setEdgeColorBypass(getSelectedEdges(), new.colors = "#AAAAAA")
createColumnFilter(filter.name = "Promoter_DMR", column = "type", type = "edges", criterion = "Promoter_DMR", predicate = "IS")
setEdgeLineWidthBypass(getSelectedEdges(), new.widths = 25)
setEdgeLineStyleBypass(getSelectedEdges(), new.styles = "DOT")
setEdgeOpacityBypass(getSelectedEdges(), new.values = 150)
setEdgeColorBypass(getSelectedEdges(), new.colors = "#000000")
createColumnFilter(filter.name = "Distal_DMR", column = "type", type = "edges", criterion = "Distal_DMR", predicate = "IS")
setEdgeLineWidthBypass(getSelectedEdges(), new.widths = 10)
setEdgeLineStyleBypass(getSelectedEdges(), new.styles = "DOT")
setEdgeOpacityBypass(getSelectedEdges(), new.values = 150)
setEdgeColorBypass(getSelectedEdges(), new.colors = "#555555")
createColumnFilter(filter.name = "Double_DMR", column = "type", type = "edges", criterion = "Double_DMR", predicate = "IS")
setEdgeLineWidthBypass(getSelectedEdges(), new.widths = 50)
setEdgeLineStyleBypass(getSelectedEdges(), new.styles = "DOT")
setEdgeOpacityBypass(getSelectedEdges(), new.values = 150)
setEdgeColorBypass(getSelectedEdges(), new.colors = "#000000")
}
createDegreeFilter(filter.name = "single", criterion = c(0,0))
deleteSelectedNodes()
createColumnFilter(filter.name = "NES_DOWN", column = "nes", criterion = 0, type = "nodes", predicate = "LESS_THAN")
setNodeColorBypass(getSelectedNodes(), new.colors = "#C411FF")
createColumnFilter(filter.name = "NES_UP", column = "nes", criterion = 0, type = "nodes", predicate = "GREATER_THAN")
setNodeColorBypass(getSelectedNodes(), new.colors = "#5AFF00")
createColumnFilter(filter.name = "TF_activity_pval", column = "pval", criterion = c(0.1,0.99), type = "nodes", predicate = "BETWEEN")
setNodeColorBypass(getSelectedNodes(), new.colors = "#BBBBBB")
}
df2cytos <- function(Aracn_network = T,
Aracn_net = NULL,
DEGs,
TFs,
PPI_network = NULL,
PPI = T,
Network_title,
Networks_collection,
Methyl = F,
Methyl_Network = NULL){
DEG <- Prepare_features(DEGs, "DEG")
TF <- Prepare_features(TFs, "TF")
if (PPI & Aracn_network){
message("Both")
NET <- build_network_from_aracn(T, PPI_network, T, Aracn_net)[,c(7,8,2:6,9:11)]
}else if(PPI){
message("Only PPI")
NET <- PPI_network
}else{
message("only TFs")
NET <- Aracn_net
}
iNet <- graph_from_data_frame(NET, directed = T)
res <- Prepare_Cytoscape_network(iNet, DEG, TF)
NET <- igraph::as_data_frame(res$network)
colnames(NET)[c(1,2)] <- c("source","target")
colnames(res$features)[1] <- "id"
if (Methyl){
Methyl_Network$merging <- paste(Methyl_Network$source, Methyl_Network$target, sep = ",")
if (colnames(NET)[4] == "target"){
NET <- NET[,c(1,2,5:10)]
}
NET$merging <- paste(NET$source, NET$target)
NET <- merge(NET, Methyl_Network, by = "merging", all.x = T, all.y = T)
Methyl_features <- data.frame(id = Methyl_Network$source,
logFC_Methylation = Methyl_Network$logFC_Methylation,
pval_Methylation = Methyl_Network$pval_Methylation,
Type = Methyl_Network$fragment_type
)
Target_methyl_features <- data.frame(id = Methyl_Network$target,
Type = rep("Gene", nrow(Methyl_Network)))
Target_methyl_features <- Target_methyl_features[Target_methyl_features$id %ni% res$features$id,]
res$features <- merge(res$features, Methyl_features, by = "id", all.x = T, all.y = T)
res$features <- merge(res$features, Target_methyl_features, by = "id", all.x = T, all.y = T)
set(res$features,which(is.na(res$features[["Type.x"]])),"Type.x","")
set(res$features,which(is.na(res$features[["Type.y"]])),"Type.y","")
set(res$features,which(is.na(res$features[["Type"]])),"Type","")
res$features$Type <- paste0(res$features$Type.x, res$features$Type.y, res$features$Type)
res$features <- res$features[,c(1:7, 9, 10, 12)]
set(NET,which(is.na(NET[["source.x"]])),"source.x","")
set(NET,which(is.na(NET[["target.x"]])),"target.x","")
set(NET,which(is.na(NET[["source.y"]])),"source.y","")
set(NET,which(is.na(NET[["target.y"]])),"target.y","")
NET$source <- paste0(NET$source.x, NET$source.y)
NET$target <- paste0(NET$target.x, NET$target.y)
if("Direction" %in% colnames(NET)){
NET <- NET[,c("source", "target", "mor", "likelihood", "state", "logFC_Methylation", "pval_Methylation", "Annotation", "Direction", "Score", "type")]
}else{
NET <- NET[,c("source", "target", "mor", "likelihood", "state", "logFC_Methylation", "pval_Methylation", "type")]
}
set(NET,which(is.na(NET[["mor"]])),"mor",0)
set(NET,which(is.na(NET[["likelihood"]])),"likelihood",1)
NET$state <- ifelse(is.na(NET$state), ifelse(NET$logFC_Methylation < 0, "Hypomethylation", "Hypermethylation"), NET$state)
set(NET,which(is.na(NET[["logFC_Methylation"]])),"logFC_Methylation",0)
set(NET,which(is.na(NET[["pval_Methylation"]])),"pval_Methylation",1)
set(NET,which(is.na(NET[["Annotation"]])),"Annotation","")
set(NET,which(is.na(NET[["Direction"]])),"Direction","")
set(NET,which(is.na(NET[["Score"]])),"Score",0)
res$features <- res$features[!duplicated(res$features),]
set(res$features,which(is.na(res$features[["logFC"]])),"logFC",0)
set(res$features,which(is.na(res$features[["P.Value"]])),"P.Value",1)
set(res$features,which(is.na(res$features[["nes"]])),"nes",0)
set(res$features,which(is.na(res$features[["Eigen_centrality"]])),"Eigen_centrality",0)
set(res$features,which(is.na(res$features[["Page_rank"]])),"Page_rank",0)
set(res$features,which(is.na(res$features[["logFC_Methylation"]])),"logFC_Methylation",0)
set(res$features,which(is.na(res$features[["pval_Methylation"]])),"pval_Methylation",1)
set(res$features,which(is.na(res$features[["pval"]])),"pval",1)
}
createNetworkFromDataFrames(edges = NET, nodes = res$features, title = Network_title, collection = Networks_collection)
Stylish_the_network(PPI, Aracn_network, Methyl, res$features, NET, title = Network_title)
return(res)
}
HL60_m_agi_vs_M14_m_agi_network <- df2cytos(Aracn_network = T, HL60_m_agi_vs_M14_m_agi_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.AGI5198-MOLM14.Mut.AGI5198`,
TFs = HL60_m_agi_vs_M14_m_agi_msviper$mrs_table,
PPI = T, PPI_network = FIsInGene_020720_with_annotations,
Network_title = "HL vs MOLM post AGI TF PPI", Networks_collection = "Cell line networks",
Methyl = F)
Prepare_features <- function(feature_data_frame, type_of_data){
if(type_of_data == "DEG"){
res <- feature_data_frame[,c("Gene", "logFC", "P.Value")]
res <- dplyr::filter(res, Gene != "NA")
}else{
res <- feature_data_frame[,c("TF", "nes", "pval")]
colnames(res)[1] <- "Gene"
}
return(res)
}
HL60_m_agi_vs_M14_m_agi_network <- df2cytos(Aracn_network = T, HL60_m_agi_vs_M14_m_agi_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.AGI5198-MOLM14.Mut.AGI5198`,
TFs = HL60_m_agi_vs_M14_m_agi_msviper$mrs_table,
PPI = T, PPI_network = FIsInGene_020720_with_annotations,
Network_title = "HL vs MOLM post AGI TF PPI", Networks_collection = "Cell line networks",
Methyl = F)
HL60_m_agi_vs_M14_m_agi_only_TF_network <- df2cytos(Aracn_network = T, HL60_m_agi_vs_M14_m_agi_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.AGI5198-MOLM14.Mut.AGI5198`,
TFs = HL60_m_agi_vs_M14_m_agi_msviper$mrs_table,
PPI = F,
Network_title = "HL vs MOLM post AGI only TF", Networks_collection = "Cell line networks",
Methyl = F)
colnames(Cell_line_diff_exp$`HL60.Mut.DMF-MOLM14.Mut.DMF`)[10] <- "Gene"
HL60_m_vs_M14_m_network <- df2cytos(Aracn_network = T, HL60_m_vs_M14_m_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.DMF-MOLM14.Mut.DMF`,
TFs = HL60_m_vs_M14_m_msviper$mrs_table,
PPI = T, PPI_network = FIsInGene_020720_with_annotations,
Network_title = "HL60 vs MOLM TF PPI", Networks_collection = "Cell line networks",
Methyl = F)
View(Cell_line_diff_exp)
View(Cell_line_diff_exp[["HL60.Mut.DMF-MOLM14.Mut.DMF"]])
View(HL60_m_vs_M14_m_msviper)
View(HL60_m_vs_M14_m_msviper[["mrs_table"]])
HL60_m_vs_M14_m_network <- df2cytos(Aracn_network = T, HL60_m_vs_M14_m_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.DMF-MOLM14.Mut.DMF`,
TFs = HL60_m_vs_M14_m_msviper$mrs_table,
PPI = T, PPI_network = FIsInGene_020720_with_annotations,
Network_title = "HL60 vs MOLM TF PPI", Networks_collection = "Cell line networks",
Methyl = F)
HL60_m_vs_M14_m_only_TF_network <- df2cytos(Aracn_network = T, HL60_m_vs_M14_m_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.DMF-MOLM14.Mut.DMF`,
TFs = HL60_m_vs_M14_m_msviper$mrs_table,
PPI = F,
Network_title = "HL60 vs MOLM only TF", Networks_collection = "Cell line networks",
Methyl = F)
colnames(Cell_line_diff_exp$`HL60.Mut.None-HL60.WT.None`)[10] <- "Gene"
HL60_Mut_vs_HL60_WT_network <- df2cytos(Aracn_network = T, HL60_m_agi_vs_M14_m_agi_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.None-HL60.WT.None`,
TFs = HL60_m_agi_vs_M14_m_agi_msviper$mrs_table,
PPI = T, PPI_network = FIsInGene_020720_with_annotations,
Network_title = "HL Mut vs wt TF PPI", Networks_collection = "Cell line networks",
Methyl = F)
HL60_Mut_vs_HL60_WT_network <- df2cytos(Aracn_network = T, HL60_m_agi_vs_M14_m_agi_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.None-HL60.WT.None`,
TFs = HL60_m_agi_vs_M14_m_agi_msviper$mrs_table,
PPI = T, PPI_network = FIsInGene_020720_with_annotations,
Network_title = "HL Mut vs wt TF PPI", Networks_collection = "Cell line networks",
Methyl = F)
HL60_Mut_vs_HL60_WT_only_TF_network <- df2cytos(Aracn_network = T, HL60_m_agi_vs_M14_m_agi_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.None-HL60.WT.None`,
TFs = HL60_m_agi_vs_M14_m_agi_msviper$mrs_table,
PPI = F,
Network_title = "HL Mut vs wt only TF", Networks_collection = "Cell line networks",
Methyl = F)
colnames(Cell_line_diff_exp$`HL60.Mut.AGI5198-MOLM14.Mut.AGI5198`)[10] <- "Gene"
HL60_m_agi_vs_M14_m_agi_network <- df2cytos(Aracn_network = T, HL60_m_agi_vs_M14_m_agi_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.AGI5198-MOLM14.Mut.AGI5198`,
TFs = HL60_m_agi_vs_M14_m_agi_msviper$mrs_table,
PPI = T, PPI_network = FIsInGene_020720_with_annotations,
Network_title = "HL vs MOLM post AGI TF PPI", Networks_collection = "Cell line networks",
Methyl = F)
HL60_m_agi_vs_M14_m_agi_only_TF_network <- df2cytos(Aracn_network = T, HL60_m_agi_vs_M14_m_agi_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.AGI5198-MOLM14.Mut.AGI5198`,
TFs = HL60_m_agi_vs_M14_m_agi_msviper$mrs_table,
PPI = F,
Network_title = "HL vs MOLM post AGI only TF", Networks_collection = "Cell line networks",
Methyl = F)
colnames(Cell_line_diff_exp$`HL60.Mut.DMF-MOLM14.Mut.DMF`)[10] <- "Gene"
HL60_m_vs_M14_m_network <- df2cytos(Aracn_network = T, HL60_m_vs_M14_m_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.DMF-MOLM14.Mut.DMF`,
TFs = HL60_m_vs_M14_m_msviper$mrs_table,
PPI = T, PPI_network = FIsInGene_020720_with_annotations,
Network_title = "HL60 vs MOLM TF PPI", Networks_collection = "Cell line networks",
Methyl = F)
HL60_m_vs_M14_m_only_TF_network <- df2cytos(Aracn_network = T, HL60_m_vs_M14_m_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.DMF-MOLM14.Mut.DMF`,
TFs = HL60_m_vs_M14_m_msviper$mrs_table,
PPI = F,
Network_title = "HL60 vs MOLM only TF", Networks_collection = "Cell line networks",
Methyl = F)
colnames(Cell_line_diff_exp$`HL60.Mut.None-HL60.WT.None`)[10] <- "Gene"
HL60_Mut_vs_HL60_WT_network <- df2cytos(Aracn_network = T, HL60_Mut_vs_HL60_WT_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.None-HL60.WT.None`,
TFs = HL60_m_agi_vs_M14_m_agi_msviper$mrs_table,
PPI = T, PPI_network = FIsInGene_020720_with_annotations,
Network_title = "HL Mut vs wt TF PPI", Networks_collection = "Cell line networks",
Methyl = F)
HL60_Mut_vs_HL60_WT_only_TF_network <- df2cytos(Aracn_network = T, HL60_Mut_vs_HL60_WT_msviper$regulons,
DEGs = Cell_line_diff_exp$`HL60.Mut.None-HL60.WT.None`,
TFs = HL60_m_agi_vs_M14_m_agi_msviper$mrs_table,
PPI = F,
Network_title = "HL Mut vs wt only TF", Networks_collection = "Cell line networks",
Methyl = F)
RNAseq <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/RNAseq_parsed.csv", row.names = 1, header = T, check.names = F)
NR_R_msviper <- readRDS("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/Results/Tables/NR_R_msviper.rds")
viper(RNAseq, NR_R_msviper$regulons)
NR_R_msviper$regulons
viper(eset = RNAseq, regulon = NR_R_msviper$regulons)
data(dorothea_hs, package = "dorothea")
regulons = dorothea_hs %>%
filter(confidence %in% c("A", "B"))
View(regulons)
regulons_2 <- NR_R_msviper$regulons
View(regulons_2)
regulons_2 <- regulons_2[,c(1,4,2,3)]
viper(eset = RNAseq, regulon = regulons_2)
colnames(regulons_2) <- colnames(regulons)
viper(eset = RNAseq, regulon = regulons)
dorothea2viper_regulons <- function(df) {
regulon_list <- split(df, df$tf)
viper_regulons <- lapply(regulon_list, function(regulon) {
tfmode <- stats::setNames(regulon$mor, regulon$target)
list(tfmode = tfmode, likelihood = rep(1, length(tfmode)))
})
return(viper_regulons)
}
regulons_3 <- dorothea2viper_regulons(regulons_2)
View(regulons_3)
viper(eset = RNAseq, regulon = regulons_3)
TF_activity_Koichi <- viper(eset = RNAseq, regulon = regulons_3)
pheatmap::pheatmap(TF_activity_Koichi)
Clinical_patient_data <- read.csv("~/GitHub/Koichi_gene_expression_analyses_git/Koichi_gene_expression_analyses/DATA/Clinical_patient_data.csv") %>%
.[!duplicated(.),]
Make_factor <- function(Samplesheet = Clinical_patient_data,
Samples_names,
Mutations_to_ignore = 0,
Clinical_outcome_A,
Clinical_name_A,
Clinical_outcome_B,
Clinical_name_B,
Clinical_outcome_C,
Clinical_name_C){
# Function made for Clinical_patient_data
# Create a factor that can be used for Differential_analysis function
# Samplesheet = Clinical_patient_data
# Mutations_to_ignore: A vector of mutations that have to be taken into account (type 0 no mutations to ignore)
# Clinical_outcome_A: A vector of best response corresponding to the phenotype A
# Clinical_outcome_B: A vector of best response corresponding to the phenotype B
# Clinical_outcome_C: A vector of best response corresponding to the phenotype C
# Baseline_sample: A logical variable indicating whether Baseline samples are taken or not
# Relapse_sample: A logical variable indicating whether Relapse samples are taken or not
# Phenotype_A: The name of the first phenotype that have to be compared to
# Phenotype _B: The name of the second phenotype that have to be compared to
# Clinical_outcome_comparison: A logical variable indicating whether clinical outcome are taken into account
# Baseline:
# Relapse: A logical variable indicating whether Relapse samples are taken or not
if(typeof(Mutations_to_ignore) != "double"){
Mutations_samples <- Samplesheet[which(duplicated(str_split(Samplesheet$mutations, pattern=","), Mutations_to_ignore)),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Mutations_factor <- factor(ifelse(Samples_names %in% Mutations_samples, "Mut", "WT"))
}else{
Mutations_factor <- factor(rep("", length(Samples_names)))
}
Clinical_outcome_A <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_A),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome_B <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_B),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome_C <- Samplesheet[which(Samplesheet$Best_response %in% Clinical_outcome_C),] %>%
c(.$Baseline_RNAseq_data, .$Relapse_RNAseq_data) %>%
na.omit()
Clinical_outcome <- factor(ifelse(Samples_names %in% Clinical_outcome_A, Clinical_name_A,
ifelse(Samples_names %in% Clinical_outcome_B, Clinical_name_B,
ifelse(Samples_names %in% Clinical_outcome_C, Clinical_name_C, ""))))
Sample_timing <- factor(ifelse(Samples_names %in% Samplesheet$Baseline_RNAseq_data, "B", "REL"))
if(typeof(Mutations_to_ignore) != "double"){
Final_factor <- paste(Mutations_factor, Clinical_outcome, Sample_timing, sep = ".") %>% as.factor()
}else{
Final_factor <- paste(Clinical_outcome, Sample_timing, sep = ".") %>% as.factor()
}
return(Final_factor)
}
Factor_R_OR_NR_B <- Make_factor(Clinical_patient_data,
colnames(RNAseq),
0,
c("CR", "CRi"),
"R",
c("MLFS", "HI", "CRp", "PR"),
"OR",
c("SD", "PD"),
"NR")
Factor_R_OR_NR_B
pheatmap::pheatmap(TF_activity_Koichi, annotation_col = Factor_R_OR_NR_B)
View(Clinical_patient_data)
pheatmap::pheatmap(TF_activity_Koichi, annotation_col = data.frame("row names" = colnames(RNAseq), pheno = Factor_R_OR_NR_B)
)
pheatmap::pheatmap(TF_activity_Koichi, annotation_col = rownames(data.frame("row names" = colnames(RNAseq), pheno = Factor_R_OR_NR_B))=colnames(RNAseq)=
pheatmap::pheatmap(TF_activity_Koichi, annotation_col = rownames(data.frame("row names" = colnames(RNAseq), pheno = Factor_R_OR_NR_B))=colnames(RNAseq))
annot <- rownames(data.frame("row names" = colnames(RNAseq), pheno = Factor_R_OR_NR_B))=colnames(RNAseq)
annot <- data.frame("row names" = colnames(RNAseq), pheno = Factor_R_OR_NR_B)
View(annot)
pheatmap::pheatmap(TF_activity_Koichi, annotation_col = annot)
rownames(annot) <- annot$row.names
pheatmap::pheatmap(TF_activity_Koichi, annotation_col = annot)
ref_R_B <- Factor_R_OR_NR_B == "R.B"
ref_NR_B <- Factor_R_OR_NR_B == "NR.B"
ref_R_B | ref_NR_B
View(TF_activity_Koichi)
View(annot)
pheatmap::pheatmap(TF_activity_Koichi[,c(ref_R_B | ref_NR_B)], annotation_col = annot[c(ref_R_B | ref_NR_B),])
pheatmap::pheatmap(TF_activity_Koichi[,c(ref_R_B | ref_NR_B)], annotation_col = annot[c("pheno"),c(ref_R_B | ref_NR_B),])
pheatmap::pheatmap(TF_activity_Koichi[,c(ref_R_B | ref_NR_B)], annotation_col = annot[1,c(ref_R_B | ref_NR_B),])
pheatmap::pheatmap(TF_activity_Koichi[,c(ref_R_B | ref_NR_B)], annotation_col = annot[c(ref_R_B | ref_NR_B),1])
pheatmap::pheatmap(TF_activity_Koichi[,c(ref_R_B | ref_NR_B)], annotation_col = annot[c(ref_R_B | ref_NR_B),c(0,1)])
pheatmap::pheatmap(TF_activity_Koichi[,c(ref_R_B | ref_NR_B)], annotation_col = annot[c(ref_R_B | ref_NR_B),-2])
annot[,-2]
annot[,]
annot[,1]
annot[,2]
annot[,-1]
annot[,c(0,2)]
annot[,0]
annot[,c(0,2)]
pheatmap::pheatmap(TF_activity_Koichi[,ref_REL_POST], annotation_col = annot[ref_REL_POST,])
ref_REL_POST <- Factor_R_OR_NR_B == "OR.REL" | Factor_R_OR_NR_B == "R.REL"
ref_REL_POST <- Factor_R_OR_NR_B == "OR.REL" | Factor_R_OR_NR_B == "R.REL"
pheatmap::pheatmap(TF_activity_Koichi[,ref_REL_POST], annotation_col = annot[ref_REL_POST,])
pheatmap::pheatmap(TF_activity_Koichi[,ref_REL_POST | ref_R_B], annotation_col = annot[ref_REL_POST | ref_R_B,])
pheatmap::pheatmap(TF_activity_Koichi[,Factor_R_OR_NR_B | ref_R_B], annotation_col = annot[Factor_R_OR_NR_B | ref_R_B,])
pheatmap::pheatmap(TF_activity_Koichi[,Factor_R_OR_NR_B == "R.REL" | ref_R_B], annotation_col = annot[Factor_R_OR_NR_B == "R.REL" | ref_R_B,])
FactoMineR::PCA(TF_activity_Koichi)
FactoMineR::PCA(t(TF_activity_Koichi))
PCA(t(RNAseq))
FactoMineR::PCA(t(RNAseq))
source("~/test.R")
prepare_pchic <- function(cell_lines = "all", minimum_interaction = 5){
load("DATA/pchic.RData")
if (length(cell_lines) >= 1){
cell_lines = c("Mon", "Mac0", "Mac1", "Mac2", "Neu", "MK", "EP", "Ery", "FoeT", "nCD4", "tCD4", "aCD4", "naCD4", "nCD8", "tCD8", "nB", "tB")
}
pchic <- data.frame(pchic[rowSums(pchic[,cell_lines] >= minimum_interaction) >= 1, 1:10]) %>% na.omit(.)
colnames(pchic)[c(1:5, 6:10)] <- rep(c("chr", "start", "end", "ID", "Name"), 2)
return(pchic)
}
prepare_pchic <- function(cell_lines = "all", minimum_interaction = 5){
load("DATA/pchic.RData")
if (length(cell_lines) >= 1){
cell_lines = c("Mon", "Mac0", "Mac1", "Mac2", "Neu", "MK", "EP", "Ery", "FoeT", "nCD4", "tCD4", "aCD4", "naCD4", "nCD8", "tCD8", "nB", "tB")
}
pchic <- data.frame(pchic[rowSums(pchic[,cell_lines] >= minimum_interaction) >= 1, 1:10]) %>% na.omit(.)
colnames(pchic)[c(1:5, 6:10)] <- rep(c("chr", "start", "end", "ID", "Name"), 2)
return(pchic)
}
pchic <- prepare_pchic(cell_lines = c("Mon", "Mac1", "Mac0", "Mac2", "MK", "Ery", "EP"))
setwd("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp")
pchic <- prepare_pchic(cell_lines = c("Mon", "Mac1", "Mac0", "Mac2", "MK", "Ery", "EP"))
library(dplyr)
pchic <- prepare_pchic(cell_lines = c("Mon", "Mac1", "Mac0", "Mac2", "MK", "Ery", "EP"))
pchic_bed <- unique(rbind(pchic[, c(1:4, 5)], pchic[, c(6:9, 10)]))
View(pchic_bed)
View(pchic)
Pchic_edges <- pchic[,c(4,9)]
View(pchic_bed)
Pchic_edges <- pchic[,c(4,9)]
colnames(Pchic_edges) <- c("source", "target")
Pchic_nodes <- pchic_bed[,c(4,5)]
Pchic_nodes$Promoter <- Pchic_nodes$ID %in% Pchic_edges$source
colnames(Pchic_nodes) <- c("id", "Gene_name", "Is_Promoter")
View(Pchic_nodes)
createNetworkFromDataFrames(edges = Pchic_edges, nodes = Pchic_nodes, title = "Pchic_network", collection = "Multiplex")
library(RCy3)
createNetworkFromDataFrames(edges = Pchic_edges, nodes = Pchic_nodes, title = "Pchic_network", collection = "Multiplex")
source("Make_pchic_network.R")
read.csv("/media/alexis/DATA/Data_for_networks/9606.protein.links.v11.5.txt")
PPI <- read.csv("~/Documents/List_genes_from_transcriptome/FIsInGene_020720_with_annotations.tsv", sep = "\t")
View(PPI)
createGraphFromNetwork(PPI)
createGraphFromNetwork(network = PPI, title = "test", collection = "test")
createNetworkFromDataFrames(edges = PPI, title = "test", collection = "test")
colnames(PPI) <- c("source", "target", "Annotation", "Direction", "Score")
createNetworkFromDataFrames(edges = PPI, title = "test", collection = "test")
data(dorothea_hs, package = "dorothea")
regulons = dorothea_hs %>%
filter(confidence %in% c("A", "B"))
View(dorothea_hs)
View(dorothea_hs)
data(regulonaml)
data(regulonlaml)
library(aracne.networks)
BiocManager::install("aracn.networks")
library(aracne.networks)
BiocManager::install("aracne.networks")
library(aracne.networks)
data(regulonlaml)
force(regulonlaml)
View(regulonlaml)
write.regulon(regulonlaml,n=10)
View(regulonlaml)
regulonlaml[["10002"]][["tfmode"]]
dorothea2viper_regulons <- function(df) {
regulon_list <- split(df, df$tf)
viper_regulons <- lapply(regulon_list, function(regulon) {
tfmode <- stats::setNames(regulon$mor, regulon$target)
list(tfmode = tfmode, likelihood = rep(1, length(tfmode)))
})
return(viper_regulons)
}
dorothea2viper_regulons(regulonlaml)
viper_regulons2dorothea <- function(r) {
res <- r %>%
purrr::map_df(
.f = function(i) {
tf_target <- i$tfmode %>%
tibble::enframe(name = "target", value = "mor") %>%
mutate(likelihood = i$likelihood)
},
.id = "tf"
)
return(res)
}
viper_regulons2dorothea(regulonlaml)
regulonaml <- viper_regulons2dorothea(regulonlaml)
View(regulonaml)
getSYMBOL(regulonaml$tf, data='org.Hs.eg')
biomaRt::getSYMBOL(regulonaml$tf, data='org.Hs.eg')
BiocManager::install("GeneAnswers")
library(GeneAnswers)
BiocManager::install("GeneAnswers")
install.packages("GeneAnswers)
install.packages("GeneAnswers")
tall.packages("GeneAnswers",repos="http://www.bioconductor.org/packages/2.5/bioc")
install.packages("GeneAnswers",repos="http://www.bioconductor.org/packages/2.5/bioc")
library(GeneAnswers)
library(GeneAnswers)
