filtered <- net %>% dplyr::filter(tf %in% Genes_n_TFs | target %in% Genes_n_TFs)
filtered_feat <- feat %>%
dplyr::filter(ID %in% Genes_n_TFs) %>%
dplyr::filter(ID %in% filtered$tf | ID %in% filtered$target)
colnames(filtered)[1:2] <- c("source", "target")
colnames(filtered_feat)[1] <- c("id")
filtered <- filtered %>%
dplyr::filter(source %in% filtered_feat$id & target %in% filtered_feat$id)
createNetworkFromDataFrames(nodes = filtered_feat, edges = filtered, title = title, collection = collection)
Modify_Cytoscape_network(filtered, filtered_feat, title, collection)
}
List_of_network
ChEA_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_CHEA$net, Networks_testing_analysis$Output_CHEA$features,
"ChEA", paste0("Knowledge_driven", "_filtered"[filter_param], "_shorter"[shorter]))
All_Samples_TPM_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_all_Samples_TPM$net, Networks_testing_analysis$Output_all_Samples_TPM$features,
"All_samples", paste0("ARACNe_inferance", "_filtered"[filter_param], "_shorter"[shorter]))
View(Networks_testing_analysis)
View(Networks_testing_analysis[["Output_all_Samples_TPM"]][["ms_vip"]])
View(Networks_testing_analysis[["Output_all_Samples_TPM"]][["features"]])
Reactome_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_reactome$net, Networks_testing_analysis$Output_reactome$features,
"Reactome", paste0("Knowledge_driven", "_filtered"[filter_param], "_shorter"[shorter]))
String_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_String$net, Networks_testing_analysis$Output_String$features,
"String", paste0("Knowledge_driven", "_filtered"[filter_param], "_shorter"[shorter]))
Regulons_A_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_regulons_A$net, Networks_testing_analysis$Output_regulons_A$features,
"Regulon_A", paste0("Dorothea short", "_filtered"[filter_param], "_shorter"[shorter]))
Regulons_E_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_regulons_E$net, Networks_testing_analysis$Output_regulons_E$features,
"Regulon_E", paste0("Dorothea short", "_filtered"[filter_param], "_shorter"[shorter]))
List_of_network
ChEA_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_CHEA$net, Networks_testing_analysis$Output_CHEA$features,
"ChEA", paste0("Knowledge_driven", "_filtered"[filter_param], "_shorter"[shorter]))
All_Samples_TPM_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_all_Samples_TPM$net, Networks_testing_analysis$Output_all_Samples_TPM$features,
"All_samples", paste0("ARACNe_inferance", "_filtered"[filter_param], "_shorter"[shorter]))
Reactome_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_reactome$net, Networks_testing_analysis$Output_reactome$features,
"Reactome", paste0("Knowledge_driven", "_filtered"[filter_param], "_shorter"[shorter]))
String_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_String$net, Networks_testing_analysis$Output_String$features,
"String", paste0("Knowledge_driven", "_filtered"[filter_param], "_shorter"[shorter]))
Regulons_A_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_regulons_A$net, Networks_testing_analysis$Output_regulons_A$features,
"Regulon_A", paste0("Dorothea short", "_filtered"[filter_param], "_shorter"[shorter]))
Regulons_E_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_regulons_E$net, Networks_testing_analysis$Output_regulons_E$features,
"Regulon_E", paste0("Dorothea short", "_filtered"[filter_param], "_shorter"[shorter]))
Regulons_E_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_regulons_E$net, Networks_testing_analysis$Output_regulons_E$features,
"Regulon_E", paste0("Dorothea short", "_filtered"[filter_param], "_shorter"[shorter]))
Baseline_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_TPM_Baseline$net, Networks_testing_analysis$Output_TPM_Baseline$features,
"Baseline", paste0("ARACNe_inferance short", "_filtered"[filter_param], "_shorter"[shorter]))
shorter = F
filter_param = T
Networks_testing_analysis <- list()
List_of_network <- list.dirs(recursive = F)[list.dirs(recursive = F) %>% stringr::str_detect("utput")] %>% stringr::str_remove("./")
Networks_testing_analysis <- lapply(List_of_network, function(a) {
From_network_to_TF_activity(a, filter_param, shorter)
})
names(Networks_testing_analysis) <- List_of_network
png(file = paste0("Results/GRN/Network_prio", "_short"[shorter], "_filtered"[filter_param], ".png"), width = 1920, height = 1080)
grid.arrange(Networks_testing_analysis[["Output_all_Samples_TPM"]][["scat"]],
Networks_testing_analysis[["Output_CHEA"]][["scat"]],
Networks_testing_analysis[["Output_reactome"]][["scat"]],
Networks_testing_analysis[["Output_regulons_A"]][["scat"]],
Networks_testing_analysis[["Output_regulons_E"]][["scat"]],
Networks_testing_analysis[["Output_String"]][["scat"]],
Networks_testing_analysis[["Output_TPM_Baseline"]][["scat"]],
ncol=3,
top = textGrob("Network_priorization",
just = c('center'),
gp = gpar(fontsize = 32)))
dev.off()
saveRDS(Networks_testing_analysis, paste0("/media/alexis/DATA/Network_testing_analysis", "_filtered"[filter_param], "_shorter"[shorter], ".rds"))
Modify_Cytoscape_network <- function(e, n, title, collection){
defaults <- list(NODE_SHAPE="diamond",
NODE_SIZE=10,
EDGE_TRANSPARENCY=40,
NODE_LABEL_POSITION="c,c,c,0.00,0.00")
nodeLabels <- mapVisualProperty(visual.prop = "node label", table.column = 'id', mapping.type = 'p')
createVisualStyle(title, defaults, list(nodeLabels))
setVisualStyle(title)
createDegreeFilter(filter.name = "single", criterion = c(0,0))
deleteSelectedNodes()
deleteSelectedNodes()
min_logFC <- min(n$logFC)
max_logFC <- max(n$logFC)
setNodeColorMapping(table.column = 'logFC',
table.column.values = c(min_logFC, 0.0, max_logFC),
colors = c('#0000FF', '#FFFFFF', '#FF0000'),
style.name = title)
setNodeFillOpacityMapping(table.column = 'P.Value',
table.column.values = c(0, 0.1, 1),
opacities = c(255, 200, 20),
style.name = title)
setNodeBorderOpacityMapping(table.column = 'P.Value',
table.column.values = c(0, 0.1, 1),
opacities = c(255, 200, 20),
style.name = title)
setNodeLabelOpacityMapping(table.column = 'P.Value',
table.column.values = c(0, 0.1, 1),
opacities = c(255, 200, 20),
style.name = title)
min_eigen <- min(n$eigenvalue)
max_eigen <- max(n$eigenvalue)
setNodeSizeMapping (table.column = 'eigenvalue',
table.column.values = c(min_eigen, max_eigen),
sizes = c(30, 200),
style.name = title)
setNodeFontSizeMapping(table.column = 'eigenvalue',
table.column.values = c(min_eigen, max_eigen),
sizes = c(15, 75),
style.name = title)
layoutNetwork()
exportImage(paste0("Results/GRN_testing/Network_figures/", collection, "_", title), 'SVG', zoom=200)
}
Make_Cytoscape_network <- function(net, feat, title, collection){
Genes_n_TFs <- feat %>%
dplyr::filter((abs(logFC) > 0.75 & P.Value < 0.1) | pval < 0.1) %>%
unlist(.$ID) %>%
unique()
filtered <- net %>% dplyr::filter(tf %in% Genes_n_TFs | target %in% Genes_n_TFs)
filtered_feat <- feat %>%
dplyr::filter(ID %in% Genes_n_TFs) %>%
dplyr::filter(ID %in% filtered$tf | ID %in% filtered$target)
colnames(filtered)[1:2] <- c("source", "target")
colnames(filtered_feat)[1] <- c("id")
filtered <- filtered %>%
dplyr::filter(source %in% filtered_feat$id & target %in% filtered_feat$id)
createNetworkFromDataFrames(nodes = filtered_feat, edges = filtered, title = title, collection = collection)
Modify_Cytoscape_network(filtered, filtered_feat, title, collection)
}
List_of_network
ChEA_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_CHEA$net, Networks_testing_analysis$Output_CHEA$features,
"ChEA", paste0("Knowledge_driven", "_filtered"[filter_param], "_shorter"[shorter]))
All_Samples_TPM_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_all_Samples_TPM$net, Networks_testing_analysis$Output_all_Samples_TPM$features,
"All_samples", paste0("ARACNe_inferance", "_filtered"[filter_param], "_shorter"[shorter]))
View(Networks_testing_analysis)
View(Networks_testing_analysis[["Output_all_Samples_TPM"]][["features"]])
View(Networks_testing_analysis[["Output_CHEA"]][["features"]])
View(Networks_testing_analysis)
View(Networks_testing_analysis[["Output_CHEA"]][["features"]])
Reactome_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_reactome$net, Networks_testing_analysis$Output_reactome$features,
"Reactome", paste0("Knowledge_driven", "_filtered"[filter_param], "_shorter"[shorter]))
Reactome_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_reactome$net, Networks_testing_analysis$Output_reactome$features,
"Reactome", paste0("Knowledge_driven", "_filtered"[filter_param], "_shorter"[shorter]))
String_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_String$net, Networks_testing_analysis$Output_String$features,
"String", paste0("Knowledge_driven", "_filtered"[filter_param], "_shorter"[shorter]))
Regulons_A_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_regulons_A$net, Networks_testing_analysis$Output_regulons_A$features,
"Regulon_A", paste0("Dorothea short", "_filtered"[filter_param], "_shorter"[shorter]))
Regulons_E_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_regulons_E$net, Networks_testing_analysis$Output_regulons_E$features,
"Regulon_E", paste0("Dorothea short", "_filtered"[filter_param], "_shorter"[shorter]))
Baseline_net <- Make_Cytoscape_network(Networks_testing_analysis$Output_TPM_Baseline$net, Networks_testing_analysis$Output_TPM_Baseline$features,
"Baseline", paste0("ARACNe_inferance short", "_filtered"[filter_param], "_shorter"[shorter]))
save.image("~/Daily_session.RData")
rm(list = ls())
suppressPackageStartupMessages({
library(dplyr)
library(RCy3)
library(igraph)
library(data.table)
library(viper)
library(aracne.networks)
library(stringr)
library(clusterProfiler)
library(ggplot2)
library(biomaRt)
})
"%ni%" <- Negate("%in%")
data(regulonlaml)
force(regulonlaml)
View(regulonlaml)
viper_regulons2dorothea <- function(r) {
res <- r %>%
purrr::map_df(
.f = function(i) {
tf_target <- i$tfmode %>%
tibble::enframe(name = "target", value = "mor") %>%
mutate(likelihood = i$likelihood)
},
.id = "tf"
)
return(res)
}
regulonaml <- viper_regulons2dorothea(regulonlaml)
View(regulonaml)
regulonaml_SYMBOL <- data.frame("source" = GeneAnswers::getSymbols(regulonaml$tf, data = "org.Hs.eg"),
"target" = GeneAnswers::getSymbols(regulonaml$target, data = "org.Hs.eg"),
"mor" = regulonaml$mor,
"likelihood" = regulonaml$likelihood)
library(GeneAnswers)
library(org.Hs.eg.db)
regulonaml_SYMBOL <- data.frame("source" = GeneAnswers::getSymbols(regulonaml$tf, data = "org.Hs.eg"),
"target" = GeneAnswers::getSymbols(regulonaml$target, data = "org.Hs.eg"),
"mor" = regulonaml$mor,
"likelihood" = regulonaml$likelihood)
View(regulonaml_SYMBOL)
dir.create("Output_regulonAML")
write.table(regulonaml_SYMBOL, "Output_regulonAML/network.txt", sep = "\t", quote = F, row.names = F)
ChEA <- read.table("GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_CHEA/network.txt", sep = "\t", header = T) %>% .[-1,]
rm(list = ls())
suppressPackageStartupMessages({
library(dplyr)
library(RCy3)
library(igraph)
library(data.table)
library(viper)
library(aracne.networks)
library(stringr)
library(clusterProfiler)
library(ggplot2)
library(biomaRt)
})
"%ni%" <- Negate("%in%")
gene_of_interest <- c("CALCRL", "RAMP2", "ERG", "ATF4", "ETS2")
ChEA <- read.table("GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_CHEA/network.txt", sep = "\t", header = T) %>% .[-1,]
View(ChEA)
fPPI <- read.table("GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_reactome/network.txt", sep = "\t", header = T) %>% .[,1:2]
String_network <- read.table("GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_String/network.txt", sep ="\t", header = T)
String_network <- read.table("GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_String/network.txt", sep ="\t", header = T)
View(fPPI)
View(String_network)
View(ChEA)
String_network <- read.table("GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_String/network.txt", sep ="\t", header = T)
fPPI <- read.table("GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_reactome/network.txt", sep = "\t", header = T) %>% .[,1:2]
ChEA <- read.table("GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_CHEA/network.txt", sep = "\t", header = T) %>% .[-1,]
ChEA <- ChEA[,c(2,1)]
View(ChEA)
String_network_Target_genes <- String_network %>%
dplyr::filter(protein1 %in% gene_of_interest | protein2 %in% gene_of_interest)
colnames(String_network_Target_genes) <- c("source", "target")
fPPI_Target_genes <- fPPI %>%
dplyr::filter(Gene1 %in% gene_of_interest | Gene2 %in% gene_of_interest)
colnames(fPPI_Target_genes) <- c("source", "target")
CheA_Target_genes <- ChEA %>%
dplyr::filter(source %in% gene_of_interest | target %in% gene_of_interest)
colnames(CheA_Target_genes) <- c("source", "target")
nodes_String <- data.frame("id"=unique(unlist(String_network_Target_genes$source, String_network_Target_genes$target)))
nodes_fPPI <- data.frame("id"=unique(c(fPPI_Target_genes$source, fPPI_Target_genes$target)))
nodes_ChEA <- data.frame("id"=unique(c(CheA_Target_genes$source, CheA_Target_genes$target)))
load("~/Daily_session.RData")
KOICHI_raw_data <- read.csv("/media/alexis/DATA/KOICHI_raw_data.csv")
View(KOICHI_raw_data)
KOICHI_raw_data <- read.csv("/media/alexis/DATA/KOICHI_raw_data.csv", check.names = F)
colnames(KOICHI_raw_data)[1] <- "gene"
write.table(KOICHI_raw_data, "/media/alexis/DATA/KOICHI_raw_data_for_ARACNe.tsv", sep = "\t", row.names = F)
rm(list = ls())
suppressPackageStartupMessages({
library(dplyr)
library(RCy3)
library(igraph)
library(data.table)
library(viper)
library(aracne.networks)
library(stringr)
library(clusterProfiler)
library(ggplot2)
library(biomaRt)
})
"%ni%" <- Negate("%in%")
gene_of_interest <- c("CALCRL", "RAMP2", "ERG", "ATF4", "ETS2")
ChEA <- read.table("GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_CHEA/network.txt", sep = "\t", header = T) %>% .[-1,]
ChEA <- ChEA[,c(2,1)]
CheA_Target_genes <- ChEA
colnames(CheA_Target_genes) <- c("source", "target")
nodes_ChEA <- data.frame("id"=unique(c(CheA_Target_genes$source, CheA_Target_genes$target)))
createNetworkFromDataFrames(nodes = nodes_ChEA, edges = CheA_Target_genes, title = "ChEA", collection = "ChEA")
createNetworkFromDataFrames(nodes = nodes_ChEA, edges = CheA_Target_genes, title = "ChEA", collection = "ChEA")
rm(list = ls())
suppressPackageStartupMessages({
library(dplyr)
library(RCy3)
library(igraph)
library(data.table)
library(viper)
library(aracne.networks)
library(stringr)
library(clusterProfiler)
library(ggplot2)
library(biomaRt)
library(GeneAnswers)
library(org.Hs.eg.db)
})
"%ni%" <- Negate("%in%")
String_network <- read.table("/media/alexis/DATA/String_network/filtered_0.7.txt", sep =" ", header = T)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
protein1 <- String_network$protein1 %>%
sapply(function(gene){
stringr::str_split(gene, pattern = "[.]") %>%
unlist() %>%
.[2]
}) %>%
unname()
protein2 <- String_network$protein2 %>%
sapply(function(gene){
stringr::str_split(gene, pattern = "[.]") %>%
unlist() %>%
.[2]
}) %>%
unname()
String_corrected <- data.frame("protein1" = protein1,
"protein2" = protein2)
genes <- unlist(protein1, protein2) %>% unique()
G_list <- getBM(filters= "ensembl_peptide_id",
attributes= c("ensembl_peptide_id","hgnc_symbol"),
values=genes,
mart= mart)
String_network <- read.table("/media/alexis/DATA/String_network/filtered_0.7.txt", sep =" ", header = T, check.names = F)
protein1 <- String_network$protein1 %>%
sapply(function(gene){
stringr::str_split(gene, pattern = "[.]") %>%
unlist() %>%
.[2]
}) %>%
unname()
String_network <- read.table("/media/alexis/DATA/String_network/filtered_0.7.txt", sep =" ", header = F, check.names = F)
protein1 <- String_network$V1 %>%
sapply(function(gene){
stringr::str_split(gene, pattern = "[.]") %>%
unlist() %>%
.[2]
}) %>%
unname()
protein2 <- String_network$V2 %>%
sapply(function(gene){
stringr::str_split(gene, pattern = "[.]") %>%
unlist() %>%
.[2]
}) %>%
unname()
String_corrected <- data.frame("source" = protein1,
"target" = protein2)
genes <- unlist(protein1, protein2) %>% unique()
G_list <- getBM(filters= "ensembl_peptide_id",
attributes= c("ensembl_peptide_id","hgnc_symbol"),
values=genes,
mart= mart)
String_corrected <- merge(String_corrected, G_list, by.x = "source", by.y = "ensembl_peptide_id", all.x = T)
String_corrected <- merge(String_corrected, G_list, by.x = "source", by.y = "ensembl_peptide_id", all.x = T)
String_corrected <- merge(String_corrected, G_list, by.x = "target", by.y = "ensembl_peptide_id", all.x = T)
String_corrected <- String_corrected[,4:5]
colnames(String_corrected) <- c("source", "target")
String_corrected <- unique(String_corrected)
String_corrected %>% write.table("Output_String_filtered_0.7/network.txt", sep = "\t", quote = F, row.names = F)
String_corrected %>% write.table("Output_String_filtered_0.7/network.txt", sep = "\t", quote = F, row.names = F)
network <- read.delim("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_String_filtered_0.7/network.txt")
View(network)
network_filtered <- dplyr::filter(network_filtered, !is.na(source))
network_filtered <- dplyr::filter(network, !is.na(source))
View(network_filtered)
network_filtered <- dplyr::filter(network, !is.na(source) & !is.na(target))
network_filtered <- unique(network_filtered)
network <- read.delim("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_String/network.txt")
View(network)
load("tmp/lamltfgeneregul.rda")
names(generegul)
names(generegul) %>% unique()
unique(names(generegul))
network <- read.delim("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_String/network.txt")
View(network)
network_2 <- read.delim("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Output_String_filtered_0.7/network.txt")
View(network_2)
network$protein1 %in% network_2$source
network$protein1 %in% network_2$source %>% table()
table(network$protein1 %in% network_2$source)
LOAD("TMP")
load("tmp/lamltfgeneregul.rda")
length(unique(names(generegul)))
View(generegul)
generegul[["AADACL3"]]
load("~/Daily_session.RData")
rm(list = ls())
load("~/Daily_session.RData")
Activated_element <- lapply(names(Networks_testing_analysis$params__), function(net){
Networks_testing_analysis$params__[[net]]$features %>%
dplyr::filter(pval < 0.1) %>%
.$ID
})
suppressPackageStartupMessages({
library(dplyr)
library(RCy3)
library(igraph)
library(data.table)
library(viper)
library(aracne.networks)
library(stringr)
library(clusterProfiler)
library(ggplot2)
library(gridExtra)
library(grid)
library(ggvenn)
})
"%ni%" <- Negate("%in%")
Activated_element <- lapply(names(Networks_testing_analysis$params__), function(net){
Networks_testing_analysis$params__[[net]]$features %>%
dplyr::filter(pval < 0.1) %>%
.$ID
})
names(Activated_element) <- names(Networks_testing_analysis$params__) %>% stringr::str_remove(pattern = "Output_")
View(Activated_element)
Activated_element <- lapply(names(Networks_testing_analysis$params__), function(net){
Networks_testing_analysis$params__[[net]]$features %>%
dplyr::filter(pval < 0.1) %>%
.$ID
})
names(Activated_element) <- names(Networks_testing_analysis$params__) %>% stringr::str_remove(pattern = "Output_")
ggvenn(Activated_element[c(1,2,4,8)])
params <- "params_"
Activated_element <- lapply(names(Networks_testing_analysis$params__), function(net){
Networks_testing_analysis$params__[[net]]$features %>%
dplyr::filter(pval < 0.1) %>%
.$ID
})
names(Activated_element) <- names(Networks_testing_analysis$params__) %>% stringr::str_remove(pattern = "Output_")
ggvenn(Activated_element[c(1,2,4,8)])
Activated_element[c(1,2,4,8)]
intersect(Activated_element$all_Samples_TPM, Activated_element$regulonAML)
intersect(Activated_element$all_Samples_TPM, Activated_element$CHEA)
intersect(Activated_element$all_Samples_TPM, Activated_element$String_filtered_0.7)
load("~/Daily_session.RData")
View(Networks_testing_analysis)
write.table(Networks_testing_analysis[["params__"]][["Output_all_Samples_TPM"]][["net"]], "GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Results/GRN/Network_for_muxviz.tsv", sep = "\t", header = T)
write.table(Networks_testing_analysis[["params__"]][["Output_all_Samples_TPM"]][["net"]], "GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Results/GRN/Network_for_muxviz.tsv", sep = "\t")
write.table(Networks_testing_analysis[["params__"]][["Output_all_Samples_TPM"]][["net"]], "GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Results/GRN/Network_for_muxviz.tsv", sep = "\t", row.names = F)
write.table(Networks_testing_analysis[["params__"]][["Output_CHEA"]][["net"]], "GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Results/GRN/Network_CHEA_for_muxviz.tsv", sep = "\t", row.names = F)
write.table(Networks_testing_analysis[["params__"]][["Output_CHEA"]][["features"]], "GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Results/GRN/Network_CHEA_features_for_muxviz.tsv", sep = "\t", row.names = F)
write.table(Networks_testing_analysis[["params__"]][["Output_all_Samples_TPM"]][["features"]], "GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Results/GRN/Network_All_samples_features_for_muxviz.tsv", sep = "\t", row.names = F)
library(muxViz)
randint(1:10        )
randint()
sample(1:16, 8, replace = T)
sample(1:16, 16, replace = T)
sample(1:16, 16, replace = F)
sample(1:16, 20, replace = T)
sample(1:16, 20, replace = T)
source("muxVizGUI.R")
source("~/Test_Git/muxViz/gui-old/muxVizGUI.R")
source("~/Test_Git/muxViz/gui-old/muxVizGUI.R")
install.packages("shiny")
runApp(getwd())
runApp("~/Test_Git/muxViz/gui-old/")
&
1
runApp("~/Test_Git/muxViz/gui-old/")
runApp("~/Test_Git/muxViz/gui-old/")
runApp("~/Test_Git/muxViz/gui-old/")
runApp("~/Test_Git/muxViz/gui-old/")
1
setwd("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Muxviz_training/Florentine/")
layer_tensor <- diagR(c(1, 1), 3, 1) + diagR(c(1, 1), 3, -1)
View(layer_tensor)
diagR(c(1, 1), 3, 1)
diagR(c(1, 1), 3, 1) + diagR(c(1, 1), 3, -1)
source("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Muxviz_training/Training.R", echo=TRUE)
set.seed(1)
# Network setup
Layers <- 3
Nodes <- 200
layerCouplingStrength <- 1
networkOfLayersType <- "categorical"
isDirected <- F
layer.colors <- brewer.pal(8, "Set2")
rm(list = ls())
source("~/GitHub/Multiplex_DNAmet_PPI_Chrom_Coexp/Muxviz_training/Training.R", echo=TRUE)
pathInfomap <- "../src-exe/infomap-0.x/Infomap"
nodeTensor <- list()
g.list <- list()
plantedGroupsPerLayer <- 4
# matrix of the stochastic block model
block.matrix <- matrix(0.1 / Nodes, plantedGroupsPerLayer,
plantedGroupsPerLayer)
diag(block.matrix) <- 2 * log(Nodes) / Nodes
block.sizes <- rep(floor(Nodes / plantedGroupsPerLayer), plantedGroupsPerLayer)
for (l in 1:Layers) {
#Generate the layers
g.list[[l]] <- sample_sbm(Nodes, pref.matrix=block.matrix,
block.sizes=block.sizes)
#Get the list of adjacency matrices which build the multiplex
nodeTensor[[l]] <- get.adjacency(g.list[[l]])
}
lay <- layoutMultiplex(g.list, layout="fr", ggplot.format=F, box=T)
# Show the multiplex network
plot_multiplex3D(g.list, layer.layout=lay, layer.colors=layer.colors,
layer.shift.x=0.5, layer.space=2,
layer.labels="auto", layer.labels.cex=1.5,
node.size.values="auto", node.size.scale=0.8,
show.aggregate=T)
# save the plot:
snapshot3d("../man/figures/multi_sbm.png", fmt = "png", width = 1024, height = 1024)
# Show the multiplex network
plot_multiplex3D(g.list, layer.layout=lay, layer.colors=layer.colors,
layer.shift.x=0.5, layer.space=2,
layer.labels="auto", layer.labels.cex=1.5,
node.size.values="auto", node.size.scale=0.8,
show.aggregate=T)
# save the plot:
snapshot3d("multi_sbm.png", fmt = "png", width = 1024, height = 1024)
plot_multiplex3D(g.list, layer.layout=lay, layer.colors=layer.colors,
layer.shift.x=0.5, layer.space=2,
layer.labels="auto", layer.labels.cex=1.5,
node.size.values="auto", node.size.scale=0.8,
show.aggregate=T)
# save the plot:
snapshot3d("multi_sbm.png", fmt = "png", width = 1024, height = 1024)
#> Warning in snapshot3d("../man/figures/multi_sbm.png", fmt = "png", width =
#> 1024, : webshot = TRUE requires the webshot2 package; using rgl.snapshot()
#> instead
#> Loading required package: viridisLite
library(rgl)
# Show the multiplex network
plot_multiplex3D(g.list, layer.layout=lay, layer.colors=layer.colors,
layer.shift.x=0.5, layer.space=2,
layer.labels="auto", layer.labels.cex=1.5,
node.size.values="auto", node.size.scale=0.8,
show.aggregate=T)
# save the plot:
rgl.snapshot("multi_sbm.png", fmt = "png", width = 1024, height = 1024)
# save the plot:
snapshot3d("multi_sbm.png", fmt = "png", width = 1024, height = 1024)
